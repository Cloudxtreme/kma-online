.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Excel::Writer::XLSX::Examples 3"
.TH Excel::Writer::XLSX::Examples 3 "2011-01-03" "perl v5.16.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Examples \- Excel::Writer::XLSX example programs.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a documentation only module showing the examples that are
included in the Excel::Writer::XLSX distribution.
.PP
This file was auto-generated via the gen_examples_pod.pl
program that is also included in the examples directory.
.SH "Example programs"
.IX Header "Example programs"
The following is a list of the 36 example programs that are included in the Excel::Writer::XLSX distribution.
.IP "\(bu" 4
\&\*(L"Example: a_simple.pl\*(R" A simple demo of some of the features.
.IP "\(bu" 4
\&\*(L"Example: bug_report.pl\*(R" A template for submitting bug reports.
.IP "\(bu" 4
\&\*(L"Example: demo.pl\*(R" A demo of some of the available features.
.IP "\(bu" 4
\&\*(L"Example: formats.pl\*(R" All the available formatting on several worksheets.
.IP "\(bu" 4
\&\*(L"Example: regions.pl\*(R" A simple example of multiple worksheets.
.IP "\(bu" 4
\&\*(L"Example: stats.pl\*(R" Basic formulas and functions.
.IP "\(bu" 4
\&\*(L"Example: array_formula.pl\*(R" Examples of how to write array formulas.
.IP "\(bu" 4
\&\*(L"Example: cgi.pl\*(R" A simple \s-1CGI\s0 program.
.IP "\(bu" 4
\&\*(L"Example: colors.pl\*(R" A demo of the colour palette and named colours.
.IP "\(bu" 4
\&\*(L"Example: diag_border.pl\*(R" A simple example of diagonal cell borders.
.IP "\(bu" 4
\&\*(L"Example: indent.pl\*(R" An example of cell indentation.
.IP "\(bu" 4
\&\*(L"Example: merge1.pl\*(R" A simple example of cell merging.
.IP "\(bu" 4
\&\*(L"Example: merge2.pl\*(R" A simple example of cell merging with formatting.
.IP "\(bu" 4
\&\*(L"Example: merge3.pl\*(R" Add hyperlinks to merged cells.
.IP "\(bu" 4
\&\*(L"Example: merge4.pl\*(R" An advanced example of merging with formatting.
.IP "\(bu" 4
\&\*(L"Example: merge5.pl\*(R" An advanced example of merging with formatting.
.IP "\(bu" 4
\&\*(L"Example: merge6.pl\*(R" An example of merging with Unicode strings.
.IP "\(bu" 4
\&\*(L"Example: mod_perl1.pl\*(R" A simple mod_perl 1 program.
.IP "\(bu" 4
\&\*(L"Example: mod_perl2.pl\*(R" A simple mod_perl 2 program.
.IP "\(bu" 4
\&\*(L"Example: sales.pl\*(R" An example of a simple sales spreadsheet.
.IP "\(bu" 4
\&\*(L"Example: stats_ext.pl\*(R" Same as stats.pl with external references.
.IP "\(bu" 4
\&\*(L"Example: stocks.pl\*(R" Demonstrates conditional formatting.
.IP "\(bu" 4
\&\*(L"Example: write_handler1.pl\*(R" Example of extending the \fIwrite()\fR method. Step 1.
.IP "\(bu" 4
\&\*(L"Example: write_handler2.pl\*(R" Example of extending the \fIwrite()\fR method. Step 2.
.IP "\(bu" 4
\&\*(L"Example: write_handler3.pl\*(R" Example of extending the \fIwrite()\fR method. Step 3.
.IP "\(bu" 4
\&\*(L"Example: write_handler4.pl\*(R" Example of extending the \fIwrite()\fR method. Step 4.
.IP "\(bu" 4
\&\*(L"Example: unicode_2022_jp.pl\*(R" Japanese: \s-1ISO\-2022\-JP\s0.
.IP "\(bu" 4
\&\*(L"Example: unicode_8859_11.pl\*(R" Thai:     \s-1ISO\-8859_11\s0.
.IP "\(bu" 4
\&\*(L"Example: unicode_8859_7.pl\*(R" Greek:    \s-1ISO\-8859_7\s0.
.IP "\(bu" 4
\&\*(L"Example: unicode_big5.pl\*(R" Chinese:  \s-1BIG5\s0.
.IP "\(bu" 4
\&\*(L"Example: unicode_cp1251.pl\*(R" Russian:  \s-1CP1251\s0.
.IP "\(bu" 4
\&\*(L"Example: unicode_cp1256.pl\*(R" Arabic:   \s-1CP1256\s0.
.IP "\(bu" 4
\&\*(L"Example: unicode_cyrillic.pl\*(R" Russian:  Cyrillic.
.IP "\(bu" 4
\&\*(L"Example: unicode_koi8r.pl\*(R" Russian:  \s-1KOI8\-R\s0.
.IP "\(bu" 4
\&\*(L"Example: unicode_polish_utf8.pl\*(R" Polish :  \s-1UTF8\s0.
.IP "\(bu" 4
\&\*(L"Example: unicode_shift_jis.pl\*(R" Japanese: Shift \s-1JIS\s0.
.SS "Example: a_simple.pl"
.IX Subsection "Example: a_simple.pl"
A simple example of how to use the Excel::Writer::XLSX module to
write text and numbers to an Excel xlsx file.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    #######################################################################
\&    #
\&    # A simple example of how to use the Excel::Writer::XLSX module to
\&    # write text and numbers to an Excel xlsx file.
\&    #
\&    # reverse(\*(AqX\*(Aq), March 2001, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new workbook called simple.xls and add a worksheet
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqa_simple.xlsx\*(Aq );
\&    
\&    die "Couldn\*(Aqt create new Excel file: $!.\en" unless defined $workbook;
\&    
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    # The general syntax is write($row, $column, $token). Note that row and
\&    # column are zero indexed
\&    #
\&    
\&    # Write some text
\&    $worksheet\->write( 0, 0, "Hi Excel!" );
\&    
\&    
\&    # Write some numbers
\&    $worksheet\->write( 2, 0, 3 );          # Writes 3
\&    $worksheet\->write( 3, 0, 3.00000 );    # Writes 3
\&    $worksheet\->write( 4, 0, 3.00001 );    # Writes 3.00001
\&    $worksheet\->write( 5, 0, 3.14159 );    # TeX revision no.?
\&    
\&    
\&    # Write some formulas
\&    $worksheet\->write(7, 0,  \*(Aq=A3 + A6\*(Aq);
\&    $worksheet\->write(8, 0,  \*(Aq=IF(A5>3,"Yes", "No")\*(Aq);
\&    
\&    
\&    # Write a hyperlink
\&    #$worksheet\->write(10, 0, \*(Aqhttp://www.perl.com/\*(Aq);
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/a_simple.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/a_simple.pl>
.SS "Example: bug_report.pl"
.IX Subsection "Example: bug_report.pl"
A template for submitting a bug report.
.PP
Run this program and read the output from the command line.
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # A template for submitting a bug report.
\&    #
\&    # Run this program and read the output from the command line.
\&    #
\&    # reverse(\*(AqX\*(Aq), March 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    
\&    use strict;
\&    
\&    print << \*(AqHINTS_1\*(Aq;
\&    
\&    REPORTING A BUG OR ASKING A QUESTION
\&    
\&        Feel free to report bugs or ask questions. However, to save time
\&        consider the following steps first:
\&    
\&        Read the documentation:
\&    
\&            The Excel::Writer::XLSX documentation has been refined in
\&            response to user questions. Therefore, if you have a question it is
\&            possible that someone else has asked it before you and that it is
\&            already addressed in the documentation. Since there is a lot of
\&            documentation to get through you should at least read the table of
\&            contents and search for keywords that you are interested in.
\&    
\&        Look at the example programs:
\&    
\&            There are over 40 example programs shipped with the standard
\&            Excel::Writer::XLSX distribution. Many of these were created
\&            in response to user questions. Try to identify an example program
\&            that corresponds to your query and adapt it to your needs.
\&    
\&    HINTS_1
\&    print "Press enter ..."; <STDIN>;
\&    
\&    print << \*(AqHINTS_2\*(Aq;
\&    
\&        If you submit a bug report here are some pointers.
\&    
\&        1.  Put "WriteExcelXML:" at the beginning of the subject line. This helps
\&            to filter genuine messages from spam.
\&    
\&        2.  Describe the problems as clearly and as concisely as possible.
\&    
\&        3.  Send a sample program. It is often easier to describe a problem in
\&            code than in written prose.
\&    
\&        4.  The sample program should be as small as possible to demonstrate the
\&            problem. Don\*(Aqt copy and past large sections of your program. The
\&            program should also be self contained and working.
\&    
\&        A sample bug report is generated below. If you use this format then it
\&        will help to analyse your question and respond to it more quickly.
\&    
\&        Please don\*(Aqt send patches without contacting the author first.
\&    
\&    
\&    HINTS_2
\&    print "Press enter ..."; <STDIN>;
\&    
\&    
\&    print << \*(AqEMAIL\*(Aq;
\&    
\&    =======================================================================
\&    
\&    To:      John McNamara <jmcnamara@cpan.org>
\&    Subject: WriteExcelXML: Problem with something.
\&    
\&    Hi John,
\&    
\&    I am using Excel::Writer::XLSX and I have encountered a problem. I
\&    want it to do SOMETHING but the module appears to do SOMETHING_ELSE.
\&    
\&    Here is some code that demonstrates the problem.
\&    
\&        #!/usr/bin/perl \-w
\&    
\&        use strict;
\&        use Excel::Writer::XLSX;
\&    
\&        my $workbook  = Excel::Writer::XLSX\->new("reload.xls");
\&        my $worksheet = $workbook\->addworksheet();
\&    
\&        $worksheet\->write(0, 0, "Hi Excel!");
\&    
\&        _\|_END_\|_
\&    
\&    My automatically generated system details are as follows:
\&    EMAIL
\&    
\&    
\&    print "\en    Perl version   : $]";
\&    print "\en    OS name        : $^O";
\&    print "\en    Module versions: (not all are required)\en";
\&    
\&    
\&    my @modules = qw(
\&                      Excel::Writer::XLSX
\&                      Spreadsheet::WriteExcel
\&                      Archive::Zip
\&                      XML::Writer
\&                      IO::File
\&                      File::Temp
\&                    );
\&    
\&    
\&    for my $module (@modules) {
\&        my $version;
\&        eval "require $module";
\&    
\&        if (not $@) {
\&            $version = $module\->VERSION;
\&            $version = \*(Aq(unknown)\*(Aq if not defined $version;
\&        }
\&        else {
\&            $version = \*(Aq(not installed)\*(Aq;
\&        }
\&    
\&        printf "%21s%\-24s\et%s\en", "", $module, $version;
\&    }
\&    
\&    
\&    print << "BYE";
\&    Yours etc.,
\&    
\&    A. Person
\&    \-\-
\&    
\&    BYE
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/bug_report.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/bug_report.pl>
.SS "Example: demo.pl"
.IX Subsection "Example: demo.pl"
A simple demo of some of the features of Excel::Writer::XLSX.
.PP
This program is used to create the project screenshot for Freshmeat:
<http://freshmeat.net/projects/writeexcel/>
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    #######################################################################
\&    #
\&    # A simple demo of some of the features of Excel::Writer::XLSX.
\&    #
\&    # This program is used to create the project screenshot for Freshmeat:
\&    # L<http://freshmeat.net/projects/writeexcel/>
\&    #
\&    # reverse(\*(AqX\*(Aq), October 2001, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    my $workbook   = Excel::Writer::XLSX\->new( \*(Aqdemo.xlsx\*(Aq );
\&    my $worksheet  = $workbook\->add_worksheet( \*(AqDemo\*(Aq );
\&    my $worksheet2 = $workbook\->add_worksheet( \*(AqAnother sheet\*(Aq );
\&    my $worksheet3 = $workbook\->add_worksheet( \*(AqAnd another\*(Aq );
\&    
\&    my $bold = $workbook\->add_format( bold => 1 );
\&    
\&    
\&    #######################################################################
\&    #
\&    # Write a general heading
\&    #
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 36, $bold );
\&    $worksheet\->set_column( \*(AqB:B\*(Aq, 20 );
\&    $worksheet\->set_row( 0, 40 );
\&    
\&    my $heading = $workbook\->add_format(
\&        bold  => 1,
\&        color => \*(Aqblue\*(Aq,
\&        size  => 16,
\&        merge => 1,
\&        align => \*(Aqvcenter\*(Aq,
\&    );
\&    
\&    my @headings = ( \*(AqFeatures of Excel::Writer::XLSX\*(Aq, \*(Aq\*(Aq );
\&    $worksheet\->write_row( \*(AqA1\*(Aq, \e@headings, $heading );
\&    
\&    
\&    #######################################################################
\&    #
\&    # Some text examples
\&    #
\&    my $text_format = $workbook\->add_format(
\&        bold   => 1,
\&        italic => 1,
\&        color  => \*(Aqred\*(Aq,
\&        size   => 18,
\&        font   => \*(AqLucida Calligraphy\*(Aq
\&    );
\&    
\&    # A phrase in Cyrillic
\&    my $unicode = pack "H*", "042d0442043e002004440440043004370430002004"
\&      . "3d043000200440044304410441043a043e043c0021";
\&    
\&    
\&    $worksheet\->write( \*(AqA2\*(Aq, "Text" );
\&    $worksheet\->write( \*(AqB2\*(Aq, "Hello Excel" );
\&    $worksheet\->write( \*(AqA3\*(Aq, "Formatted text" );
\&    $worksheet\->write( \*(AqB3\*(Aq, "Hello Excel", $text_format );
\&    $worksheet\->write( \*(AqA4\*(Aq, "Unicode text" );
\&    $worksheet\->write_utf16be_string( \*(AqB4\*(Aq, $unicode );
\&    
\&    #######################################################################
\&    #
\&    # Some numeric examples
\&    #
\&    my $num1_format = $workbook\->add_format( num_format => \*(Aq$#,##0.00\*(Aq );
\&    my $num2_format = $workbook\->add_format( num_format => \*(Aq d mmmm yyy\*(Aq );
\&    
\&    
\&    $worksheet\->write( \*(AqA5\*(Aq, "Numbers" );
\&    $worksheet\->write( \*(AqB5\*(Aq, 1234.56 );
\&    $worksheet\->write( \*(AqA6\*(Aq, "Formatted numbers" );
\&    $worksheet\->write( \*(AqB6\*(Aq, 1234.56, $num1_format );
\&    $worksheet\->write( \*(AqA7\*(Aq, "Formatted numbers" );
\&    $worksheet\->write( \*(AqB7\*(Aq, 37257, $num2_format );
\&    
\&    
\&    #######################################################################
\&    #
\&    # Formulae
\&    #
\&    $worksheet\->set_selection( \*(AqB8\*(Aq );
\&    $worksheet\->write( \*(AqA8\*(Aq, \*(AqFormulas and functions, "=SIN(PI()/4)"\*(Aq );
\&    $worksheet\->write( \*(AqB8\*(Aq, \*(Aq=SIN(PI()/4)\*(Aq );
\&    
\&    
\&    #######################################################################
\&    #
\&    # Hyperlinks
\&    #
\&    $worksheet\->write( \*(AqA9\*(Aq, "Hyperlinks" );
\&    $worksheet\->write( \*(AqB9\*(Aq, \*(Aqhttp://www.perl.com/\*(Aq );
\&    
\&    
\&    #######################################################################
\&    #
\&    # Images
\&    #
\&    $worksheet\->write( \*(AqA10\*(Aq, "Images" );
\&    $worksheet\->insert_image( \*(AqB10\*(Aq, \*(Aqrepublic.png\*(Aq, 16, 8 );
\&    
\&    
\&    #######################################################################
\&    #
\&    # Misc
\&    #
\&    $worksheet\->write( \*(AqA18\*(Aq, "Page/printer setup" );
\&    $worksheet\->write( \*(AqA19\*(Aq, "Multiple worksheets" );
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/demo.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/demo.pl>
.SS "Example: formats.pl"
.IX Subsection "Example: formats.pl"
Examples of formatting using the Excel::Writer::XLSX module.
.PP
This program demonstrates almost all possible formatting options. It is worth
running this program and viewing the output Excel file if you are interested
in the various formatting possibilities.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # Examples of formatting using the Excel::Writer::XLSX module.
\&    #
\&    # This program demonstrates almost all possible formatting options. It is worth
\&    # running this program and viewing the output Excel file if you are interested
\&    # in the various formatting possibilities.
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2002, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqformats.xlsx\*(Aq );
\&    
\&    # Some common formats
\&    my $center = $workbook\->add_format( align => \*(Aqcenter\*(Aq );
\&    my $heading = $workbook\->add_format( align => \*(Aqcenter\*(Aq, bold => 1 );
\&    
\&    # The named colors
\&    my %colors = (
\&        0x08, \*(Aqblack\*(Aq,
\&        0x0C, \*(Aqblue\*(Aq,
\&        0x10, \*(Aqbrown\*(Aq,
\&        0x0F, \*(Aqcyan\*(Aq,
\&        0x17, \*(Aqgray\*(Aq,
\&        0x11, \*(Aqgreen\*(Aq,
\&        0x0B, \*(Aqlime\*(Aq,
\&        0x0E, \*(Aqmagenta\*(Aq,
\&        0x12, \*(Aqnavy\*(Aq,
\&        0x35, \*(Aqorange\*(Aq,
\&        0x21, \*(Aqpink\*(Aq,
\&        0x14, \*(Aqpurple\*(Aq,
\&        0x0A, \*(Aqred\*(Aq,
\&        0x16, \*(Aqsilver\*(Aq,
\&        0x09, \*(Aqwhite\*(Aq,
\&        0x0D, \*(Aqyellow\*(Aq,
\&    
\&    );
\&    
\&    # Call these subroutines to demonstrate different formatting options
\&    intro();
\&    fonts();
\&    named_colors();
\&    standard_colors();
\&    numeric_formats();
\&    borders();
\&    patterns();
\&    alignment();
\&    misc();
\&    
\&    # Note: this is required
\&    $workbook\->close();
\&    
\&    
\&    ######################################################################
\&    #
\&    # Intro.
\&    #
\&    sub intro {
\&    
\&        my $worksheet = $workbook\->add_worksheet( \*(AqIntroduction\*(Aq );
\&    
\&        $worksheet\->set_column( 0, 0, 60 );
\&    
\&        my $format = $workbook\->add_format();
\&        $format\->set_bold();
\&        $format\->set_size( 14 );
\&        $format\->set_color( \*(Aqblue\*(Aq );
\&        $format\->set_align( \*(Aqcenter\*(Aq );
\&    
\&        my $format2 = $workbook\->add_format();
\&        $format2\->set_bold();
\&        $format2\->set_color( \*(Aqblue\*(Aq );
\&    
\&        $worksheet\->write( 2, 0, \*(AqThis workbook demonstrates some of\*(Aq, $format );
\&        $worksheet\->write( 3, 0, \*(Aqthe formatting options provided by\*(Aq, $format );
\&        $worksheet\->write( 4, 0, \*(Aqthe Excel::Writer::XLSX module.\*(Aq,    $format );
\&    
\&        $worksheet\->write( \*(AqA7\*(Aq, \*(AqSections:\*(Aq,                  $format2 );
\&        $worksheet\->write( \*(AqA8\*(Aq, "internal:Fonts!A1",          \*(AqFonts\*(Aq );
\&        $worksheet\->write( \*(AqA9\*(Aq, "internal:\*(AqNamed colors\*(Aq!A1", \*(AqNamed colors\*(Aq );
\&        $worksheet\->write(
\&            \*(AqA10\*(Aq,
\&            "internal:\*(AqStandard colors\*(Aq!A1",
\&            \*(AqStandard colors\*(Aq
\&        );
\&        $worksheet\->write(
\&            \*(AqA11\*(Aq,
\&            "internal:\*(AqNumeric formats\*(Aq!A1",
\&            \*(AqNumeric formats\*(Aq
\&        );
\&        $worksheet\->write( \*(AqA12\*(Aq, "internal:Borders!A1",       \*(AqBorders\*(Aq );
\&        $worksheet\->write( \*(AqA13\*(Aq, "internal:Patterns!A1",      \*(AqPatterns\*(Aq );
\&        $worksheet\->write( \*(AqA14\*(Aq, "internal:Alignment!A1",     \*(AqAlignment\*(Aq );
\&        $worksheet\->write( \*(AqA15\*(Aq, "internal:Miscellaneous!A1", \*(AqMiscellaneous\*(Aq );
\&    
\&    }
\&    
\&    
\&    ######################################################################
\&    #
\&    # Demonstrate the named colors.
\&    #
\&    sub named_colors {
\&    
\&        my $worksheet = $workbook\->add_worksheet( \*(AqNamed colors\*(Aq );
\&    
\&        $worksheet\->set_column( 0, 3, 15 );
\&    
\&        $worksheet\->write( 0, 0, "Index", $heading );
\&        $worksheet\->write( 0, 1, "Index", $heading );
\&        $worksheet\->write( 0, 2, "Name",  $heading );
\&        $worksheet\->write( 0, 3, "Color", $heading );
\&    
\&        my $i = 1;
\&    
\&        while ( my ( $index, $color ) = each %colors ) {
\&            my $format = $workbook\->add_format(
\&                bg_color => $color,
\&                pattern  => 1,
\&                border   => 1
\&            );
\&    
\&            $worksheet\->write( $i + 1, 0, $index, $center );
\&            $worksheet\->write( $i + 1, 1, sprintf( "0x%02X", $index ), $center );
\&            $worksheet\->write( $i + 1, 2, $color, $center );
\&            $worksheet\->write( $i + 1, 3, \*(Aq\*(Aq,     $format );
\&            $i++;
\&        }
\&    }
\&    
\&    
\&    ######################################################################
\&    #
\&    # Demonstrate the standard Excel colors in the range 8..63.
\&    #
\&    sub standard_colors {
\&    
\&        my $worksheet = $workbook\->add_worksheet( \*(AqStandard colors\*(Aq );
\&    
\&        $worksheet\->set_column( 0, 3, 15 );
\&    
\&        $worksheet\->write( 0, 0, "Index", $heading );
\&        $worksheet\->write( 0, 1, "Index", $heading );
\&        $worksheet\->write( 0, 2, "Color", $heading );
\&        $worksheet\->write( 0, 3, "Name",  $heading );
\&    
\&        for my $i ( 8 .. 63 ) {
\&            my $format = $workbook\->add_format(
\&                bg_color => $i,
\&                pattern  => 1,
\&                border   => 1
\&            );
\&    
\&            $worksheet\->write( ( $i \- 7 ), 0, $i, $center );
\&            $worksheet\->write( ( $i \- 7 ), 1, sprintf( "0x%02X", $i ), $center );
\&            $worksheet\->write( ( $i \- 7 ), 2, \*(Aq\*(Aq, $format );
\&    
\&            # Add the  color names
\&            if ( exists $colors{$i} ) {
\&                $worksheet\->write( ( $i \- 7 ), 3, $colors{$i}, $center );
\&    
\&            }
\&        }
\&    }
\&    
\&    
\&    ######################################################################
\&    #
\&    # Demonstrate the standard numeric formats.
\&    #
\&    sub numeric_formats {
\&    
\&        my $worksheet = $workbook\->add_worksheet( \*(AqNumeric formats\*(Aq );
\&    
\&        $worksheet\->set_column( 0, 4, 15 );
\&        $worksheet\->set_column( 5, 5, 45 );
\&    
\&        $worksheet\->write( 0, 0, "Index",       $heading );
\&        $worksheet\->write( 0, 1, "Index",       $heading );
\&        $worksheet\->write( 0, 2, "Unformatted", $heading );
\&        $worksheet\->write( 0, 3, "Formatted",   $heading );
\&        $worksheet\->write( 0, 4, "Negative",    $heading );
\&        $worksheet\->write( 0, 5, "Format",      $heading );
\&    
\&        #<<<
\&        my @formats;
\&        push @formats, [ 0x00, 1234.567,   0,         \*(AqGeneral\*(Aq ];
\&        push @formats, [ 0x01, 1234.567,   0,         \*(Aq0\*(Aq ];
\&        push @formats, [ 0x02, 1234.567,   0,         \*(Aq0.00\*(Aq ];
\&        push @formats, [ 0x03, 1234.567,   0,         \*(Aq#,##0\*(Aq ];
\&        push @formats, [ 0x04, 1234.567,   0,         \*(Aq#,##0.00\*(Aq ];
\&        push @formats, [ 0x05, 1234.567,   \-1234.567, \*(Aq($#,##0_);($#,##0)\*(Aq ];
\&        push @formats, [ 0x06, 1234.567,   \-1234.567, \*(Aq($#,##0_);[Red]($#,##0)\*(Aq ];
\&        push @formats, [ 0x07, 1234.567,   \-1234.567, \*(Aq($#,##0.00_);($#,##0.00)\*(Aq ];
\&        push @formats, [ 0x08, 1234.567,   \-1234.567, \*(Aq($#,##0.00_);[Red]($#,##0.00)\*(Aq ];
\&        push @formats, [ 0x09, 0.567,      0,         \*(Aq0%\*(Aq ];
\&        push @formats, [ 0x0a, 0.567,      0,         \*(Aq0.00%\*(Aq ];
\&        push @formats, [ 0x0b, 1234.567,   0,         \*(Aq0.00E+00\*(Aq ];
\&        push @formats, [ 0x0c, 0.75,       0,         \*(Aq# ?/?\*(Aq ];
\&        push @formats, [ 0x0d, 0.3125,     0,         \*(Aq# ??/??\*(Aq ];
\&        push @formats, [ 0x0e, 36892.521,  0,         \*(Aqm/d/yy\*(Aq ];
\&        push @formats, [ 0x0f, 36892.521,  0,         \*(Aqd\-mmm\-yy\*(Aq ];
\&        push @formats, [ 0x10, 36892.521,  0,         \*(Aqd\-mmm\*(Aq ];
\&        push @formats, [ 0x11, 36892.521,  0,         \*(Aqmmm\-yy\*(Aq ];
\&        push @formats, [ 0x12, 36892.521,  0,         \*(Aqh:mm AM/PM\*(Aq ];
\&        push @formats, [ 0x13, 36892.521,  0,         \*(Aqh:mm:ss AM/PM\*(Aq ];
\&        push @formats, [ 0x14, 36892.521,  0,         \*(Aqh:mm\*(Aq ];
\&        push @formats, [ 0x15, 36892.521,  0,         \*(Aqh:mm:ss\*(Aq ];
\&        push @formats, [ 0x16, 36892.521,  0,         \*(Aqm/d/yy h:mm\*(Aq ];
\&        push @formats, [ 0x25, 1234.567,   \-1234.567, \*(Aq(#,##0_);(#,##0)\*(Aq ];
\&        push @formats, [ 0x26, 1234.567,   \-1234.567, \*(Aq(#,##0_);[Red](#,##0)\*(Aq ];
\&        push @formats, [ 0x27, 1234.567,   \-1234.567, \*(Aq(#,##0.00_);(#,##0.00)\*(Aq ];
\&        push @formats, [ 0x28, 1234.567,   \-1234.567, \*(Aq(#,##0.00_);[Red](#,##0.00)\*(Aq ];
\&        push @formats, [ 0x29, 1234.567,   \-1234.567, \*(Aq_(* #,##0_);_(* (#,##0);_(* "\-"_);_(@_)\*(Aq ];
\&        push @formats, [ 0x2a, 1234.567,   \-1234.567, \*(Aq_($* #,##0_);_($* (#,##0);_($* "\-"_);_(@_)\*(Aq ];
\&        push @formats, [ 0x2b, 1234.567,   \-1234.567, \*(Aq_(* #,##0.00_);_(* (#,##0.00);_(* "\-"??_);_(@_)\*(Aq ];
\&        push @formats, [ 0x2c, 1234.567,   \-1234.567, \*(Aq_($* #,##0.00_);_($* (#,##0.00);_($* "\-"??_);_(@_)\*(Aq ];
\&        push @formats, [ 0x2d, 36892.521,  0,         \*(Aqmm:ss\*(Aq ];
\&        push @formats, [ 0x2e, 3.0153,     0,         \*(Aq[h]:mm:ss\*(Aq ];
\&        push @formats, [ 0x2f, 36892.521,  0,         \*(Aqmm:ss.0\*(Aq ];
\&        push @formats, [ 0x30, 1234.567,   0,         \*(Aq##0.0E+0\*(Aq ];
\&        push @formats, [ 0x31, 1234.567,   0,         \*(Aq@\*(Aq ];
\&        #>>>
\&    
\&        my $i;
\&        foreach my $format ( @formats ) {
\&            my $style = $workbook\->add_format();
\&            $style\->set_num_format( $format\->[0] );
\&    
\&            $i++;
\&            $worksheet\->write( $i, 0, $format\->[0], $center );
\&            $worksheet\->write( $i, 1, sprintf( "0x%02X", $format\->[0] ), $center );
\&            $worksheet\->write( $i, 2, $format\->[1], $center );
\&            $worksheet\->write( $i, 3, $format\->[1], $style );
\&    
\&            if ( $format\->[2] ) {
\&                $worksheet\->write( $i, 4, $format\->[2], $style );
\&            }
\&    
\&            $worksheet\->write_string( $i, 5, $format\->[3] );
\&        }
\&    }
\&    
\&    
\&    ######################################################################
\&    #
\&    # Demonstrate the font options.
\&    #
\&    sub fonts {
\&    
\&        my $worksheet = $workbook\->add_worksheet( \*(AqFonts\*(Aq );
\&    
\&        $worksheet\->set_column( 0, 0, 30 );
\&        $worksheet\->set_column( 1, 1, 10 );
\&    
\&        $worksheet\->write( 0, 0, "Font name", $heading );
\&        $worksheet\->write( 0, 1, "Font size", $heading );
\&    
\&        my @fonts;
\&        push @fonts, [ 10, \*(AqArial\*(Aq ];
\&        push @fonts, [ 12, \*(AqArial\*(Aq ];
\&        push @fonts, [ 14, \*(AqArial\*(Aq ];
\&        push @fonts, [ 12, \*(AqArial Black\*(Aq ];
\&        push @fonts, [ 12, \*(AqArial Narrow\*(Aq ];
\&        push @fonts, [ 12, \*(AqCentury Schoolbook\*(Aq ];
\&        push @fonts, [ 12, \*(AqCourier\*(Aq ];
\&        push @fonts, [ 12, \*(AqCourier New\*(Aq ];
\&        push @fonts, [ 12, \*(AqGaramond\*(Aq ];
\&        push @fonts, [ 12, \*(AqImpact\*(Aq ];
\&        push @fonts, [ 12, \*(AqLucida Handwriting\*(Aq ];
\&        push @fonts, [ 12, \*(AqTimes New Roman\*(Aq ];
\&        push @fonts, [ 12, \*(AqSymbol\*(Aq ];
\&        push @fonts, [ 12, \*(AqWingdings\*(Aq ];
\&        push @fonts, [ 12, \*(AqA font that doesn\e\*(Aqt exist\*(Aq ];
\&    
\&        my $i;
\&        foreach my $font ( @fonts ) {
\&            my $format = $workbook\->add_format();
\&    
\&            $format\->set_size( $font\->[0] );
\&            $format\->set_font( $font\->[1] );
\&    
\&            $i++;
\&            $worksheet\->write( $i, 0, $font\->[1], $format );
\&            $worksheet\->write( $i, 1, $font\->[0], $format );
\&        }
\&    
\&    }
\&    
\&    
\&    ######################################################################
\&    #
\&    # Demonstrate the standard Excel border styles.
\&    #
\&    sub borders {
\&    
\&        my $worksheet = $workbook\->add_worksheet( \*(AqBorders\*(Aq );
\&    
\&        $worksheet\->set_column( 0, 4, 10 );
\&        $worksheet\->set_column( 5, 5, 40 );
\&    
\&        $worksheet\->write( 0, 0, "Index",                                $heading );
\&        $worksheet\->write( 0, 1, "Index",                                $heading );
\&        $worksheet\->write( 0, 3, "Style",                                $heading );
\&        $worksheet\->write( 0, 5, "The style is highlighted in red for ", $heading );
\&        $worksheet\->write( 1, 5, "emphasis, the default color is black.",
\&            $heading );
\&    
\&        for my $i ( 0 .. 13 ) {
\&            my $format = $workbook\->add_format();
\&            $format\->set_border( $i );
\&            $format\->set_border_color( \*(Aqred\*(Aq );
\&            $format\->set_align( \*(Aqcenter\*(Aq );
\&    
\&            $worksheet\->write( ( 2 * ( $i + 1 ) ), 0, $i, $center );
\&            $worksheet\->write( ( 2 * ( $i + 1 ) ),
\&                1, sprintf( "0x%02X", $i ), $center );
\&    
\&            $worksheet\->write( ( 2 * ( $i + 1 ) ), 3, "Border", $format );
\&        }
\&    
\&        $worksheet\->write( 30, 0, "Diag type",             $heading );
\&        $worksheet\->write( 30, 1, "Index",                 $heading );
\&        $worksheet\->write( 30, 3, "Style",                 $heading );
\&        $worksheet\->write( 30, 5, "Diagonal Boder styles", $heading );
\&    
\&        for my $i ( 1 .. 3 ) {
\&            my $format = $workbook\->add_format();
\&            $format\->set_diag_type( $i );
\&            $format\->set_diag_border( 1 );
\&            $format\->set_diag_color( \*(Aqred\*(Aq );
\&            $format\->set_align( \*(Aqcenter\*(Aq );
\&    
\&            $worksheet\->write( ( 2 * ( $i + 15 ) ), 0, $i, $center );
\&            $worksheet\->write( ( 2 * ( $i + 15 ) ),
\&                1, sprintf( "0x%02X", $i ), $center );
\&    
\&            $worksheet\->write( ( 2 * ( $i + 15 ) ), 3, "Border", $format );
\&        }
\&    }
\&    
\&    
\&    ######################################################################
\&    #
\&    # Demonstrate the standard Excel cell patterns.
\&    #
\&    sub patterns {
\&    
\&        my $worksheet = $workbook\->add_worksheet( \*(AqPatterns\*(Aq );
\&    
\&        $worksheet\->set_column( 0, 4, 10 );
\&        $worksheet\->set_column( 5, 5, 50 );
\&    
\&        $worksheet\->write( 0, 0, "Index",   $heading );
\&        $worksheet\->write( 0, 1, "Index",   $heading );
\&        $worksheet\->write( 0, 3, "Pattern", $heading );
\&    
\&        $worksheet\->write( 0, 5, "The background colour has been set to silver.",
\&            $heading );
\&        $worksheet\->write( 1, 5, "The foreground colour has been set to green.",
\&            $heading );
\&    
\&        for my $i ( 0 .. 18 ) {
\&            my $format = $workbook\->add_format();
\&    
\&            $format\->set_pattern( $i );
\&            $format\->set_bg_color( \*(Aqsilver\*(Aq );
\&            $format\->set_fg_color( \*(Aqgreen\*(Aq );
\&            $format\->set_align( \*(Aqcenter\*(Aq );
\&    
\&            $worksheet\->write( ( 2 * ( $i + 1 ) ), 0, $i, $center );
\&            $worksheet\->write( ( 2 * ( $i + 1 ) ),
\&                1, sprintf( "0x%02X", $i ), $center );
\&    
\&            $worksheet\->write( ( 2 * ( $i + 1 ) ), 3, "Pattern", $format );
\&    
\&            if ( $i == 1 ) {
\&                $worksheet\->write( ( 2 * ( $i + 1 ) ),
\&                    5, "This is solid colour, the most useful pattern.", $heading );
\&            }
\&        }
\&    }
\&    
\&    
\&    ######################################################################
\&    #
\&    # Demonstrate the standard Excel cell alignments.
\&    #
\&    sub alignment {
\&    
\&        my $worksheet = $workbook\->add_worksheet( \*(AqAlignment\*(Aq );
\&    
\&        $worksheet\->set_column( 0, 7, 12 );
\&        $worksheet\->set_row( 0, 40 );
\&        $worksheet\->set_selection( 7, 0 );
\&    
\&        my $format01 = $workbook\->add_format();
\&        my $format02 = $workbook\->add_format();
\&        my $format03 = $workbook\->add_format();
\&        my $format04 = $workbook\->add_format();
\&        my $format05 = $workbook\->add_format();
\&        my $format06 = $workbook\->add_format();
\&        my $format07 = $workbook\->add_format();
\&        my $format08 = $workbook\->add_format();
\&        my $format09 = $workbook\->add_format();
\&        my $format10 = $workbook\->add_format();
\&        my $format11 = $workbook\->add_format();
\&        my $format12 = $workbook\->add_format();
\&        my $format13 = $workbook\->add_format();
\&        my $format14 = $workbook\->add_format();
\&        my $format15 = $workbook\->add_format();
\&        my $format16 = $workbook\->add_format();
\&        my $format17 = $workbook\->add_format();
\&    
\&        $format02\->set_align( \*(Aqtop\*(Aq );
\&        $format03\->set_align( \*(Aqbottom\*(Aq );
\&        $format04\->set_align( \*(Aqvcenter\*(Aq );
\&        $format05\->set_align( \*(Aqvjustify\*(Aq );
\&        $format06\->set_text_wrap();
\&    
\&        $format07\->set_align( \*(Aqleft\*(Aq );
\&        $format08\->set_align( \*(Aqright\*(Aq );
\&        $format09\->set_align( \*(Aqcenter\*(Aq );
\&        $format10\->set_align( \*(Aqfill\*(Aq );
\&        $format11\->set_align( \*(Aqjustify\*(Aq );
\&        $format12\->set_merge();
\&    
\&        $format13\->set_rotation( 45 );
\&        $format14\->set_rotation( \-45 );
\&        $format15\->set_rotation( 270 );
\&    
\&        $format16\->set_shrink();
\&        $format17\->set_indent( 1 );
\&    
\&        $worksheet\->write( 0, 0, \*(AqVertical\*(Aq,   $heading );
\&        $worksheet\->write( 0, 1, \*(Aqtop\*(Aq,        $format02 );
\&        $worksheet\->write( 0, 2, \*(Aqbottom\*(Aq,     $format03 );
\&        $worksheet\->write( 0, 3, \*(Aqvcenter\*(Aq,    $format04 );
\&        $worksheet\->write( 0, 4, \*(Aqvjustify\*(Aq,   $format05 );
\&        $worksheet\->write( 0, 5, "text\enwrap", $format06 );
\&    
\&        $worksheet\->write( 2, 0, \*(AqHorizontal\*(Aq, $heading );
\&        $worksheet\->write( 2, 1, \*(Aqleft\*(Aq,       $format07 );
\&        $worksheet\->write( 2, 2, \*(Aqright\*(Aq,      $format08 );
\&        $worksheet\->write( 2, 3, \*(Aqcenter\*(Aq,     $format09 );
\&        $worksheet\->write( 2, 4, \*(Aqfill\*(Aq,       $format10 );
\&        $worksheet\->write( 2, 5, \*(Aqjustify\*(Aq,    $format11 );
\&    
\&        $worksheet\->write( 3, 1, \*(Aqmerge\*(Aq, $format12 );
\&        $worksheet\->write( 3, 2, \*(Aq\*(Aq,      $format12 );
\&    
\&        $worksheet\->write( 3, 3, \*(AqShrink \*(Aq x 3, $format16 );
\&        $worksheet\->write( 3, 4, \*(AqIndent\*(Aq,      $format17 );
\&    
\&    
\&        $worksheet\->write( 5, 0, \*(AqRotation\*(Aq,   $heading );
\&        $worksheet\->write( 5, 1, \*(AqRotate 45\*(Aq,  $format13 );
\&        $worksheet\->write( 6, 1, \*(AqRotate \-45\*(Aq, $format14 );
\&        $worksheet\->write( 7, 1, \*(AqRotate 270\*(Aq, $format15 );
\&    }
\&    
\&    
\&    ######################################################################
\&    #
\&    # Demonstrate other miscellaneous features.
\&    #
\&    sub misc {
\&    
\&        my $worksheet = $workbook\->add_worksheet( \*(AqMiscellaneous\*(Aq );
\&    
\&        $worksheet\->set_column( 2, 2, 25 );
\&    
\&        my $format01 = $workbook\->add_format();
\&        my $format02 = $workbook\->add_format();
\&        my $format03 = $workbook\->add_format();
\&        my $format04 = $workbook\->add_format();
\&        my $format05 = $workbook\->add_format();
\&        my $format06 = $workbook\->add_format();
\&        my $format07 = $workbook\->add_format();
\&    
\&        $format01\->set_underline( 0x01 );
\&        $format02\->set_underline( 0x02 );
\&        $format03\->set_underline( 0x21 );
\&        $format04\->set_underline( 0x22 );
\&        $format05\->set_font_strikeout();
\&        $format06\->set_font_outline();
\&        $format07\->set_font_shadow();
\&    
\&        $worksheet\->write( 1,  2, \*(AqUnderline  0x01\*(Aq,          $format01 );
\&        $worksheet\->write( 3,  2, \*(AqUnderline  0x02\*(Aq,          $format02 );
\&        $worksheet\->write( 5,  2, \*(AqUnderline  0x21\*(Aq,          $format03 );
\&        $worksheet\->write( 7,  2, \*(AqUnderline  0x22\*(Aq,          $format04 );
\&        $worksheet\->write( 9,  2, \*(AqStrikeout\*(Aq,                $format05 );
\&        $worksheet\->write( 11, 2, \*(AqOutline (Macintosh only)\*(Aq, $format06 );
\&        $worksheet\->write( 13, 2, \*(AqShadow (Macintosh only)\*(Aq,  $format07 );
\&    }
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/formats.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/formats.pl>
.SS "Example: regions.pl"
.IX Subsection "Example: regions.pl"
An example of how to use the Excel::Writer::XLSX module to write a basic
Excel workbook with multiple worksheets.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # An example of how to use the Excel::Writer::XLSX module to write a basic
\&    # Excel workbook with multiple worksheets.
\&    #
\&    # reverse(\*(AqX\*(Aq), March 2001, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new Excel workbook
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqregions.xlsx\*(Aq );
\&    
\&    # Add some worksheets
\&    my $north = $workbook\->add_worksheet( "North" );
\&    my $south = $workbook\->add_worksheet( "South" );
\&    my $east  = $workbook\->add_worksheet( "East" );
\&    my $west  = $workbook\->add_worksheet( "West" );
\&    
\&    # Add a Format
\&    my $format = $workbook\->add_format();
\&    $format\->set_bold();
\&    $format\->set_color( \*(Aqblue\*(Aq );
\&    
\&    # Add a caption to each worksheet
\&    foreach my $worksheet ( $workbook\->sheets() ) {
\&        $worksheet\->write( 0, 0, "Sales", $format );
\&    }
\&    
\&    # Write some data
\&    $north\->write( 0, 1, 200000 );
\&    $south\->write( 0, 1, 100000 );
\&    $east\->write( 0, 1, 150000 );
\&    $west\->write( 0, 1, 100000 );
\&    
\&    # Set the active worksheet
\&    $south\->activate();
\&    
\&    # Set the width of the first column
\&    $south\->set_column( 0, 0, 20 );
\&    
\&    # Set the active cell
\&    $south\->set_selection( 0, 1 );
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/regions.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/regions.pl>
.SS "Example: stats.pl"
.IX Subsection "Example: stats.pl"
A simple example of how to use functions with the Excel::Writer::XLSX
module.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # A simple example of how to use functions with the Excel::Writer::XLSX
\&    # module.
\&    #
\&    # reverse(\*(AqX\*(Aq), March 2001, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new workbook and add a worksheet
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqstats.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet( \*(AqTest data\*(Aq );
\&    
\&    # Set the column width for columns 1
\&    $worksheet\->set_column( 0, 0, 20 );
\&    
\&    
\&    # Create a format for the headings
\&    my $format = $workbook\->add_format();
\&    $format\->set_bold();
\&    
\&    
\&    # Write the sample data
\&    $worksheet\->write( 0, 0, \*(AqSample\*(Aq, $format );
\&    $worksheet\->write( 0, 1, 1 );
\&    $worksheet\->write( 0, 2, 2 );
\&    $worksheet\->write( 0, 3, 3 );
\&    $worksheet\->write( 0, 4, 4 );
\&    $worksheet\->write( 0, 5, 5 );
\&    $worksheet\->write( 0, 6, 6 );
\&    $worksheet\->write( 0, 7, 7 );
\&    $worksheet\->write( 0, 8, 8 );
\&    
\&    $worksheet\->write( 1, 0, \*(AqLength\*(Aq, $format );
\&    $worksheet\->write( 1, 1, 25.4 );
\&    $worksheet\->write( 1, 2, 25.4 );
\&    $worksheet\->write( 1, 3, 24.8 );
\&    $worksheet\->write( 1, 4, 25.0 );
\&    $worksheet\->write( 1, 5, 25.3 );
\&    $worksheet\->write( 1, 6, 24.9 );
\&    $worksheet\->write( 1, 7, 25.2 );
\&    $worksheet\->write( 1, 8, 24.8 );
\&    
\&    # Write some statistical functions
\&    $worksheet\->write( 4, 0, \*(AqCount\*(Aq, $format );
\&    $worksheet\->write( 4, 1, \*(Aq=COUNT(B1:I1)\*(Aq );
\&    
\&    $worksheet\->write( 5, 0, \*(AqSum\*(Aq, $format );
\&    $worksheet\->write( 5, 1, \*(Aq=SUM(B2:I2)\*(Aq );
\&    
\&    $worksheet\->write( 6, 0, \*(AqAverage\*(Aq, $format );
\&    $worksheet\->write( 6, 1, \*(Aq=AVERAGE(B2:I2)\*(Aq );
\&    
\&    $worksheet\->write( 7, 0, \*(AqMin\*(Aq, $format );
\&    $worksheet\->write( 7, 1, \*(Aq=MIN(B2:I2)\*(Aq );
\&    
\&    $worksheet\->write( 8, 0, \*(AqMax\*(Aq, $format );
\&    $worksheet\->write( 8, 1, \*(Aq=MAX(B2:I2)\*(Aq );
\&    
\&    $worksheet\->write( 9, 0, \*(AqStandard Deviation\*(Aq, $format );
\&    $worksheet\->write( 9, 1, \*(Aq=STDEV(B2:I2)\*(Aq );
\&    
\&    $worksheet\->write( 10, 0, \*(AqKurtosis\*(Aq, $format );
\&    $worksheet\->write( 10, 1, \*(Aq=KURT(B2:I2)\*(Aq );
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/stats.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/stats.pl>
.SS "Example: array_formula.pl"
.IX Subsection "Example: array_formula.pl"
Example of how to use the Excel::Writer::XLSX module to write simple
array formulas.
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    #######################################################################
\&    #
\&    # Example of how to use the Excel::Writer::XLSX module to write simple
\&    # array formulas.
\&    #
\&    # reverse(\*(AqX\*(Aq), August 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new workbook and add a worksheet
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqarray_formula.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    # Write some test data.
\&    $worksheet\->write( \*(AqB1\*(Aq, [ [ 500, 10 ], [ 300, 15 ] ] );
\&    $worksheet\->write( \*(AqB5\*(Aq, [ [ 1, 2, 3 ], [ 20234, 21003, 10000 ] ] );
\&    
\&    # Write an array formula that returns a single value
\&    $worksheet\->write( \*(AqA1\*(Aq, \*(Aq{=SUM(B1:C1*B2:C2)}\*(Aq );
\&    
\&    # Same as above but more verbose.
\&    $worksheet\->write_array_formula( \*(AqA2:A2\*(Aq, \*(Aq{=SUM(B1:C1*B2:C2)}\*(Aq );
\&    
\&    # Write an array formula that returns a range of values
\&    $worksheet\->write_array_formula( \*(AqA5:A7\*(Aq, \*(Aq{=TREND(C5:C7,B5:B7)}\*(Aq );
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/array_formula.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/array_formula.pl>
.SS "Example: cgi.pl"
.IX Subsection "Example: cgi.pl"
Example of how to use the Excel::Writer::XLSX module to send an Excel
file to a browser in a \s-1CGI\s0 program.
.PP
On Windows the hash-bang line should be something like:
.PP
.Vb 1
\&    #!C:\ePerl\ebin\eperl.exe
.Ve
.PP
The \*(L"Content-Disposition\*(R" line will cause a prompt to be generated to save
the file. If you want to stream the file to the browser instead, comment out
that line as shown below.
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # Example of how to use the Excel::Writer::XLSX module to send an Excel
\&    # file to a browser in a CGI program.
\&    #
\&    # On Windows the hash\-bang line should be something like:
\&    #
\&    #     #!C:\ePerl\ebin\eperl.exe
\&    #
\&    # The "Content\-Disposition" line will cause a prompt to be generated to save
\&    # the file. If you want to stream the file to the browser instead, comment out
\&    # that line as shown below.
\&    #
\&    # reverse(\*(AqX\*(Aq), March 2001, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    # Set the filename and send the content type
\&    my $filename = "cgitest.xlsx";
\&    
\&    print "Content\-type: application/vnd.ms\-excel\en";
\&    
\&    # The Content\-Disposition will generate a prompt to save the file. If you want
\&    # to stream the file to the browser, comment out the following line.
\&    print "Content\-Disposition: attachment; filename=$filename\en";
\&    print "\en";
\&    
\&    # Create a new workbook and add a worksheet. The special Perl filehandle \- will
\&    # redirect the output to STDOUT
\&    #
\&    my $workbook  = Excel::Writer::XLSX\->new( "\-" );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&    # Set the column width for column 1
\&    $worksheet\->set_column( 0, 0, 20 );
\&    
\&    
\&    # Create a format
\&    my $format = $workbook\->add_format();
\&    $format\->set_bold();
\&    $format\->set_size( 15 );
\&    $format\->set_color( \*(Aqblue\*(Aq );
\&    
\&    
\&    # Write to the workbook
\&    $worksheet\->write( 0, 0, "Hi Excel!", $format );
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/cgi.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/cgi.pl>
.SS "Example: colors.pl"
.IX Subsection "Example: colors.pl"
Demonstrates Excel::Writer::XLSX's named colors and the Excel color
palette.
.PP
The \fIset_custom_color()\fR Worksheet method can be used to override one of the
built-in palette values with a more suitable colour. See the main docs.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ################################################################################
\&    #
\&    # Demonstrates Excel::Writer::XLSX\*(Aqs named colors and the Excel color
\&    # palette.
\&    #
\&    # The set_custom_color() Worksheet method can be used to override one of the
\&    # built\-in palette values with a more suitable colour. See the main docs.
\&    #
\&    # reverse(\*(AqX\*(Aq), March 2002, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqcolors.xlsx\*(Aq );
\&    
\&    # Some common formats
\&    my $center = $workbook\->add_format( align => \*(Aqcenter\*(Aq );
\&    my $heading = $workbook\->add_format( align => \*(Aqcenter\*(Aq, bold => 1 );
\&    
\&    
\&    ######################################################################
\&    #
\&    # Demonstrate the named colors.
\&    #
\&    
\&    my %colors = (
\&        0x08, \*(Aqblack\*(Aq,
\&        0x0C, \*(Aqblue\*(Aq,
\&        0x10, \*(Aqbrown\*(Aq,
\&        0x0F, \*(Aqcyan\*(Aq,
\&        0x17, \*(Aqgray\*(Aq,
\&        0x11, \*(Aqgreen\*(Aq,
\&        0x0B, \*(Aqlime\*(Aq,
\&        0x0E, \*(Aqmagenta\*(Aq,
\&        0x12, \*(Aqnavy\*(Aq,
\&        0x35, \*(Aqorange\*(Aq,
\&        0x21, \*(Aqpink\*(Aq,
\&        0x14, \*(Aqpurple\*(Aq,
\&        0x0A, \*(Aqred\*(Aq,
\&        0x16, \*(Aqsilver\*(Aq,
\&        0x09, \*(Aqwhite\*(Aq,
\&        0x0D, \*(Aqyellow\*(Aq,
\&    
\&    );
\&    
\&    my $worksheet1 = $workbook\->add_worksheet( \*(AqNamed colors\*(Aq );
\&    
\&    $worksheet1\->set_column( 0, 3, 15 );
\&    
\&    $worksheet1\->write( 0, 0, "Index", $heading );
\&    $worksheet1\->write( 0, 1, "Index", $heading );
\&    $worksheet1\->write( 0, 2, "Name",  $heading );
\&    $worksheet1\->write( 0, 3, "Color", $heading );
\&    
\&    my $i = 1;
\&    
\&    while ( my ( $index, $color ) = each %colors ) {
\&        my $format = $workbook\->add_format(
\&            fg_color => $color,
\&            pattern  => 1,
\&            border   => 1
\&        );
\&    
\&        $worksheet1\->write( $i + 1, 0, $index, $center );
\&        $worksheet1\->write( $i + 1, 1, sprintf( "0x%02X", $index ), $center );
\&        $worksheet1\->write( $i + 1, 2, $color, $center );
\&        $worksheet1\->write( $i + 1, 3, \*(Aq\*(Aq,     $format );
\&        $i++;
\&    }
\&    
\&    
\&    ######################################################################
\&    #
\&    # Demonstrate the standard Excel colors in the range 8..63.
\&    #
\&    
\&    my $worksheet2 = $workbook\->add_worksheet( \*(AqStandard colors\*(Aq );
\&    
\&    $worksheet2\->set_column( 0, 3, 15 );
\&    
\&    $worksheet2\->write( 0, 0, "Index", $heading );
\&    $worksheet2\->write( 0, 1, "Index", $heading );
\&    $worksheet2\->write( 0, 2, "Color", $heading );
\&    $worksheet2\->write( 0, 3, "Name",  $heading );
\&    
\&    for my $i ( 8 .. 63 ) {
\&        my $format = $workbook\->add_format(
\&            fg_color => $i,
\&            pattern  => 1,
\&            border   => 1
\&        );
\&    
\&        $worksheet2\->write( ( $i \- 7 ), 0, $i, $center );
\&        $worksheet2\->write( ( $i \- 7 ), 1, sprintf( "0x%02X", $i ), $center );
\&        $worksheet2\->write( ( $i \- 7 ), 2, \*(Aq\*(Aq, $format );
\&    
\&        # Add the  color names
\&        if ( exists $colors{$i} ) {
\&            $worksheet2\->write( ( $i \- 7 ), 3, $colors{$i}, $center );
\&    
\&        }
\&    }
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/colors.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/colors.pl>
.SS "Example: diag_border.pl"
.IX Subsection "Example: diag_border.pl"
A simple formatting example that demonstrates how to add a diagonal cell
border with Excel::Writer::XLSX
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ##############################################################################
\&    #
\&    # A simple formatting example that demonstrates how to add a diagonal cell
\&    # border with Excel::Writer::XLSX
\&    #
\&    # reverse(\*(AqX\*(Aq), May 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqdiag_border.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&    my $format1 = $workbook\->add_format( diag_type => \*(Aq1\*(Aq );
\&    
\&    my $format2 = $workbook\->add_format( diag_type => \*(Aq2\*(Aq );
\&    
\&    my $format3 = $workbook\->add_format( diag_type => \*(Aq3\*(Aq );
\&    
\&    my $format4 = $workbook\->add_format(
\&        diag_type   => \*(Aq3\*(Aq,
\&        diag_border => \*(Aq7\*(Aq,
\&        diag_color  => \*(Aqred\*(Aq,
\&    );
\&    
\&    
\&    $worksheet\->write( \*(AqB3\*(Aq,  \*(AqText\*(Aq, $format1 );
\&    $worksheet\->write( \*(AqB6\*(Aq,  \*(AqText\*(Aq, $format2 );
\&    $worksheet\->write( \*(AqB9\*(Aq,  \*(AqText\*(Aq, $format3 );
\&    $worksheet\->write( \*(AqB12\*(Aq, \*(AqText\*(Aq, $format4 );
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/diag_border.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/diag_border.pl>
.SS "Example: indent.pl"
.IX Subsection "Example: indent.pl"
A simple formatting example using Excel::Writer::XLSX.
.PP
This program demonstrates the indentation cell format.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ##############################################################################
\&    #
\&    # A simple formatting example using Excel::Writer::XLSX.
\&    #
\&    # This program demonstrates the indentation cell format.
\&    #
\&    # reverse(\*(AqX\*(Aq), May 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqindent.xlsx\*(Aq );
\&    
\&    my $worksheet = $workbook\->add_worksheet();
\&    my $indent1   = $workbook\->add_format( indent => 1 );
\&    my $indent2   = $workbook\->add_format( indent => 2 );
\&    
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 40 );
\&    
\&    
\&    $worksheet\->write( \*(AqA1\*(Aq, "This text is indented 1 level",  $indent1 );
\&    $worksheet\->write( \*(AqA2\*(Aq, "This text is indented 2 levels", $indent2 );
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/indent.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/indent.pl>
.SS "Example: merge1.pl"
.IX Subsection "Example: merge1.pl"
Simple example of merging cells using the Excel::Writer::XLSX module.
.PP
This example merges three cells using the \*(L"Centre Across Selection\*(R"
alignment which was the Excel 5 method of achieving a merge. For a more
modern approach use the \fImerge_range()\fR worksheet method instead.
See the merge3.pl \- merge6.pl programs.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ###############################################################################
\&    #
\&    # Simple example of merging cells using the Excel::Writer::XLSX module.
\&    #
\&    # This example merges three cells using the "Centre Across Selection"
\&    # alignment which was the Excel 5 method of achieving a merge. For a more
\&    # modern approach use the merge_range() worksheet method instead.
\&    # See the merge3.pl \- merge6.pl programs.
\&    #
\&    # reverse(\*(AqX\*(Aq), August 2002, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new workbook and add a worksheet
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqmerge1.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&    # Increase the cell size of the merged cells to highlight the formatting.
\&    $worksheet\->set_column( \*(AqB:D\*(Aq, 20 );
\&    $worksheet\->set_row( 2, 30 );
\&    
\&    
\&    # Create a merge format
\&    my $format = $workbook\->add_format( center_across => 1 );
\&    
\&    
\&    # Only one cell should contain text, the others should be blank.
\&    $worksheet\->write( 2, 1, "Center across selection", $format );
\&    $worksheet\->write_blank( 2, 2, $format );
\&    $worksheet\->write_blank( 2, 3, $format );
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/merge1.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/merge1.pl>
.SS "Example: merge2.pl"
.IX Subsection "Example: merge2.pl"
Simple example of merging cells using the Excel::Writer::XLSX module
.PP
This example merges three cells using the \*(L"Centre Across Selection\*(R"
alignment which was the Excel 5 method of achieving a merge. For a more
modern approach use the \fImerge_range()\fR worksheet method instead.
See the merge3.pl \- merge6.pl programs.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ###############################################################################
\&    #
\&    # Simple example of merging cells using the Excel::Writer::XLSX module
\&    #
\&    # This example merges three cells using the "Centre Across Selection"
\&    # alignment which was the Excel 5 method of achieving a merge. For a more
\&    # modern approach use the merge_range() worksheet method instead.
\&    # See the merge3.pl \- merge6.pl programs.
\&    #
\&    # reverse(\*(AqX\*(Aq), August 2002, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new workbook and add a worksheet
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqmerge2.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&    # Increase the cell size of the merged cells to highlight the formatting.
\&    $worksheet\->set_column( 1, 2, 30 );
\&    $worksheet\->set_row( 2, 40 );
\&    
\&    
\&    # Create a merged format
\&    my $format = $workbook\->add_format(
\&        center_across => 1,
\&        bold          => 1,
\&        size          => 15,
\&        pattern       => 1,
\&        border        => 6,
\&        color         => \*(Aqwhite\*(Aq,
\&        fg_color      => \*(Aqgreen\*(Aq,
\&        border_color  => \*(Aqyellow\*(Aq,
\&        align         => \*(Aqvcenter\*(Aq,
\&    );
\&    
\&    
\&    # Only one cell should contain text, the others should be blank.
\&    $worksheet\->write( 2, 1, "Center across selection", $format );
\&    $worksheet\->write_blank( 2, 2, $format );
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/merge2.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/merge2.pl>
.SS "Example: merge3.pl"
.IX Subsection "Example: merge3.pl"
Example of how to use Excel::Writer::XLSX to write a hyperlink in a
merged cell. There are two options \fIwrite_url_range()\fR with a standard merge
format or \fImerge_range()\fR.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ###############################################################################
\&    #
\&    # Example of how to use Excel::Writer::XLSX to write a hyperlink in a
\&    # merged cell. There are two options write_url_range() with a standard merge
\&    # format or merge_range().
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2002, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new workbook and add a worksheet
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqmerge3.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&    # Increase the cell size of the merged cells to highlight the formatting.
\&    $worksheet\->set_row( $_, 30 ) for ( 1, 3, 6, 7 );
\&    $worksheet\->set_column( \*(AqB:D\*(Aq, 20 );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Example 1: Merge cells containing a hyperlink using write_url_range()
\&    # and the standard Excel 5+ merge property.
\&    #
\&    my $format1 = $workbook\->add_format(
\&        center_across => 1,
\&        border        => 1,
\&        underline     => 1,
\&        color         => \*(Aqblue\*(Aq,
\&    );
\&    
\&    # Write the cells to be merged
\&    $worksheet\->write_url_range( \*(AqB2:D2\*(Aq, \*(Aqhttp://www.perl.com\*(Aq, $format1 );
\&    $worksheet\->write_blank( \*(AqC2\*(Aq, $format1 );
\&    $worksheet\->write_blank( \*(AqD2\*(Aq, $format1 );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Example 2: Merge cells containing a hyperlink using merge_range().
\&    #
\&    my $format2 = $workbook\->add_format(
\&        border    => 1,
\&        underline => 1,
\&        color     => \*(Aqblue\*(Aq,
\&        align     => \*(Aqcenter\*(Aq,
\&        valign    => \*(Aqvcenter\*(Aq,
\&    );
\&    
\&    # Merge 3 cells
\&    $worksheet\->merge_range( \*(AqB4:D4\*(Aq, \*(Aqhttp://www.perl.com\*(Aq, $format2 );
\&    
\&    
\&    # Merge 3 cells over two rows
\&    $worksheet\->merge_range( \*(AqB7:D8\*(Aq, \*(Aqhttp://www.perl.com\*(Aq, $format2 );
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/merge3.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/merge3.pl>
.SS "Example: merge4.pl"
.IX Subsection "Example: merge4.pl"
Example of how to use the Excel::Writer::XLSX \fImerge_range()\fR workbook
method with complex formatting.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ###############################################################################
\&    #
\&    # Example of how to use the Excel::Writer::XLSX merge_range() workbook
\&    # method with complex formatting.
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2002, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new workbook and add a worksheet
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqmerge4.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&    # Increase the cell size of the merged cells to highlight the formatting.
\&    $worksheet\->set_row( $_, 30 ) for ( 1 .. 11 );
\&    $worksheet\->set_column( \*(AqB:D\*(Aq, 20 );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Example 1: Text centered vertically and horizontally
\&    #
\&    my $format1 = $workbook\->add_format(
\&        border => 6,
\&        bold   => 1,
\&        color  => \*(Aqred\*(Aq,
\&        valign => \*(Aqvcenter\*(Aq,
\&        align  => \*(Aqcenter\*(Aq,
\&    );
\&    
\&    
\&    $worksheet\->merge_range( \*(AqB2:D3\*(Aq, \*(AqVertical and horizontal\*(Aq, $format1 );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Example 2: Text aligned to the top and left
\&    #
\&    my $format2 = $workbook\->add_format(
\&        border => 6,
\&        bold   => 1,
\&        color  => \*(Aqred\*(Aq,
\&        valign => \*(Aqtop\*(Aq,
\&        align  => \*(Aqleft\*(Aq,
\&    );
\&    
\&    
\&    $worksheet\->merge_range( \*(AqB5:D6\*(Aq, \*(AqAligned to the top and left\*(Aq, $format2 );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Example 3:  Text aligned to the bottom and right
\&    #
\&    my $format3 = $workbook\->add_format(
\&        border => 6,
\&        bold   => 1,
\&        color  => \*(Aqred\*(Aq,
\&        valign => \*(Aqbottom\*(Aq,
\&        align  => \*(Aqright\*(Aq,
\&    );
\&    
\&    
\&    $worksheet\->merge_range( \*(AqB8:D9\*(Aq, \*(AqAligned to the bottom and right\*(Aq, $format3 );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Example 4:  Text justified (i.e. wrapped) in the cell
\&    #
\&    my $format4 = $workbook\->add_format(
\&        border => 6,
\&        bold   => 1,
\&        color  => \*(Aqred\*(Aq,
\&        valign => \*(Aqtop\*(Aq,
\&        align  => \*(Aqjustify\*(Aq,
\&    );
\&    
\&    
\&    $worksheet\->merge_range( \*(AqB11:D12\*(Aq, \*(AqJustified: \*(Aq . \*(Aqso on and \*(Aq x 18,
\&        $format4 );
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/merge4.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/merge4.pl>
.SS "Example: merge5.pl"
.IX Subsection "Example: merge5.pl"
Example of how to use the Excel::Writer::XLSX \fImerge_cells()\fR workbook
method with complex formatting and rotation.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ###############################################################################
\&    #
\&    # Example of how to use the Excel::Writer::XLSX merge_cells() workbook
\&    # method with complex formatting and rotation.
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2002, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new workbook and add a worksheet
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqmerge5.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&    # Increase the cell size of the merged cells to highlight the formatting.
\&    $worksheet\->set_row( $_, 36 ) for ( 3 .. 8 );
\&    $worksheet\->set_column( $_, $_, 15 ) for ( 1, 3, 5 );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Rotation 1, letters run from top to bottom
\&    #
\&    my $format1 = $workbook\->add_format(
\&        border   => 6,
\&        bold     => 1,
\&        color    => \*(Aqred\*(Aq,
\&        valign   => \*(Aqvcentre\*(Aq,
\&        align    => \*(Aqcentre\*(Aq,
\&        rotation => 270,
\&    );
\&    
\&    
\&    $worksheet\->merge_range( \*(AqB4:B9\*(Aq, \*(AqRotation 270\*(Aq, $format1 );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Rotation 2, 90X anticlockwise
\&    #
\&    my $format2 = $workbook\->add_format(
\&        border   => 6,
\&        bold     => 1,
\&        color    => \*(Aqred\*(Aq,
\&        valign   => \*(Aqvcentre\*(Aq,
\&        align    => \*(Aqcentre\*(Aq,
\&        rotation => 90,
\&    );
\&    
\&    
\&    $worksheet\->merge_range( \*(AqD4:D9\*(Aq, \*(AqRotation 90X\*(Aq, $format2 );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Rotation 3, 90X clockwise
\&    #
\&    my $format3 = $workbook\->add_format(
\&        border   => 6,
\&        bold     => 1,
\&        color    => \*(Aqred\*(Aq,
\&        valign   => \*(Aqvcentre\*(Aq,
\&        align    => \*(Aqcentre\*(Aq,
\&        rotation => \-90,
\&    );
\&    
\&    
\&    $worksheet\->merge_range( \*(AqF4:F9\*(Aq, \*(AqRotation \-90X\*(Aq, $format3 );
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/merge5.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/merge5.pl>
.SS "Example: merge6.pl"
.IX Subsection "Example: merge6.pl"
Example of how to use the Excel::Writer::XLSX \fImerge_cells()\fR workbook
method with Unicode strings.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ###############################################################################
\&    #
\&    # Example of how to use the Excel::Writer::XLSX merge_cells() workbook
\&    # method with Unicode strings.
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), December 2005, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new workbook and add a worksheet
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqmerge6.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&    # Increase the cell size of the merged cells to highlight the formatting.
\&    $worksheet\->set_row( $_, 36 ) for 2 .. 9;
\&    $worksheet\->set_column( \*(AqB:D\*(Aq, 25 );
\&    
\&    
\&    # Format for the merged cells.
\&    my $format = $workbook\->add_format(
\&        border => 6,
\&        bold   => 1,
\&        color  => \*(Aqred\*(Aq,
\&        size   => 20,
\&        valign => \*(Aqvcentre\*(Aq,
\&        align  => \*(Aqleft\*(Aq,
\&        indent => 1,
\&    );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Write an Ascii string.
\&    #
\&    $worksheet\->merge_range( \*(AqB3:D4\*(Aq, \*(AqASCII: A simple string\*(Aq, $format );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Write a UTF\-8 Unicode string.
\&    #
\&    my $smiley = chr 0x263a;
\&    $worksheet\->merge_range( \*(AqB6:D7\*(Aq, "UTF\-8: A Unicode smiley $smiley", $format );
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/merge6.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/merge6.pl>
.SS "Example: mod_perl1.pl"
.IX Subsection "Example: mod_perl1.pl"
Example of how to use the Excel::Writer::XLSX module to send an Excel
file to a browser using mod_perl 1 and Apache
.PP
This module ties *XLSX directly to Apache, and with the correct
content\-disposition/types it will prompt the user to save
the file, or open it at this location.
.PP
This script is a modification of the Excel::Writer::XLSX cgi.pl example.
.PP
Change the name of this file to Cgi.pm.
Change the package location to where ever you locate this package.
In the example below it is located in the WriteExcel directory.
.PP
Your httpd.conf entry for this module, should you choose to use it
as a stand alone app, should look similar to the following:
.PP
.Vb 5
\&    <Location /spreadsheet\-test>
\&      SetHandler perl\-script
\&      PerlHandler Excel::Writer::XLSX::Cgi
\&      PerlSendHeader On
\&    </Location>
.Ve
.PP
The PerlHandler name above and the package name below *have* to match.
.PP
.Vb 10
\&    ###############################################################################
\&    #
\&    # Example of how to use the Excel::Writer::XLSX module to send an Excel
\&    # file to a browser using mod_perl 1 and Apache
\&    #
\&    # This module ties *XLSX directly to Apache, and with the correct
\&    # content\-disposition/types it will prompt the user to save
\&    # the file, or open it at this location.
\&    #
\&    # This script is a modification of the Excel::Writer::XLSX cgi.pl example.
\&    #
\&    # Change the name of this file to Cgi.pm.
\&    # Change the package location to where ever you locate this package.
\&    # In the example below it is located in the WriteExcel directory.
\&    #
\&    # Your httpd.conf entry for this module, should you choose to use it
\&    # as a stand alone app, should look similar to the following:
\&    #
\&    #     <Location /spreadsheet\-test>
\&    #       SetHandler perl\-script
\&    #       PerlHandler Excel::Writer::XLSX::Cgi
\&    #       PerlSendHeader On
\&    #     </Location>
\&    #
\&    # The PerlHandler name above and the package name below *have* to match.
\&    
\&    # Apr 2001, Thomas Sullivan, webmaster@860.org
\&    # Feb 2001, John McNamara, jmcnamara@cpan.org
\&    
\&    package Excel::Writer::XLSX::Cgi;
\&    
\&    ##########################################
\&    # Pragma Definitions
\&    ##########################################
\&    use strict;
\&    
\&    ##########################################
\&    # Required Modules
\&    ##########################################
\&    use Apache::Constants qw(:common);
\&    use Apache::Request;
\&    use Apache::URI;    # This may not be needed
\&    use Excel::Writer::XLSX;
\&    
\&    ##########################################
\&    # Main App Body
\&    ##########################################
\&    sub handler {
\&    
\&        # New apache object
\&        # Should you decide to use it.
\&        my $r = Apache::Request\->new( shift );
\&    
\&        # Set the filename and send the content type
\&        # This will appear when they save the spreadsheet
\&        my $filename = "cgitest.xlsx";
\&    
\&        ####################################################
\&        ## Send the content type headers
\&        ####################################################
\&        print "Content\-disposition: attachment;filename=$filename\en";
\&        print "Content\-type: application/vnd.ms\-excel\en\en";
\&    
\&        ####################################################
\&        # Tie a filehandle to Apache\*(Aqs STDOUT.
\&        # Create a new workbook and add a worksheet.
\&        ####################################################
\&        tie *XLSX => \*(AqApache\*(Aq;
\&        binmode( *XLSX );
\&    
\&        my $workbook  = Excel::Writer::XLSX\->new( \e*XLSX );
\&        my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&        # Set the column width for column 1
\&        $worksheet\->set_column( 0, 0, 20 );
\&    
\&    
\&        # Create a format
\&        my $format = $workbook\->add_format();
\&        $format\->set_bold();
\&        $format\->set_size( 15 );
\&        $format\->set_color( \*(Aqblue\*(Aq );
\&    
\&    
\&        # Write to the workbook
\&        $worksheet\->write( 0, 0, "Hi Excel!", $format );
\&    
\&        # You must close the workbook for Content\-disposition
\&        $workbook\->close();
\&    }
\&    
\&    1;
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/mod_perl1.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/mod_perl1.pl>
.SS "Example: mod_perl2.pl"
.IX Subsection "Example: mod_perl2.pl"
Example of how to use the Excel::Writer::XLSX module to send an Excel
file to a browser using mod_perl 2 and Apache.
.PP
This module ties *XLSX directly to Apache, and with the correct
content\-disposition/types it will prompt the user to save
the file, or open it at this location.
.PP
This script is a modification of the Excel::Writer::XLSX cgi.pl example.
.PP
Change the name of this file to MP2Test.pm.
Change the package location to where ever you locate this package.
In the example below it is located in the WriteExcel directory.
.PP
Your httpd.conf entry for this module, should you choose to use it
as a stand alone app, should look similar to the following:
.PP
.Vb 3
\&    PerlModule Apache2::RequestRec
\&    PerlModule APR::Table
\&    PerlModule Apache2::RequestIO
\&
\&    <Location /spreadsheet\-test>
\&       SetHandler perl\-script
\&       PerlResponseHandler Excel::Writer::XLSX::MP2Test
\&    </Location>
.Ve
.PP
The PerlResponseHandler must match the package name below.
.PP
.Vb 10
\&    ###############################################################################
\&    #
\&    # Example of how to use the Excel::Writer::XLSX module to send an Excel
\&    # file to a browser using mod_perl 2 and Apache.
\&    #
\&    # This module ties *XLSX directly to Apache, and with the correct
\&    # content\-disposition/types it will prompt the user to save
\&    # the file, or open it at this location.
\&    #
\&    # This script is a modification of the Excel::Writer::XLSX cgi.pl example.
\&    #
\&    # Change the name of this file to MP2Test.pm.
\&    # Change the package location to where ever you locate this package.
\&    # In the example below it is located in the WriteExcel directory.
\&    #
\&    # Your httpd.conf entry for this module, should you choose to use it
\&    # as a stand alone app, should look similar to the following:
\&    #
\&    #     PerlModule Apache2::RequestRec
\&    #     PerlModule APR::Table
\&    #     PerlModule Apache2::RequestIO
\&    #
\&    #     <Location /spreadsheet\-test>
\&    #        SetHandler perl\-script
\&    #        PerlResponseHandler Excel::Writer::XLSX::MP2Test
\&    #     </Location>
\&    #
\&    # The PerlResponseHandler must match the package name below.
\&    
\&    # Jun 2004, Matisse Enzer, matisse@matisse.net  (mod_perl 2 version)
\&    # Apr 2001, Thomas Sullivan, webmaster@860.org
\&    # Feb 2001, John McNamara, jmcnamara@cpan.org
\&    
\&    package Excel::Writer::XLSX::MP2Test;
\&    
\&    ##########################################
\&    # Pragma Definitions
\&    ##########################################
\&    use strict;
\&    
\&    ##########################################
\&    # Required Modules
\&    ##########################################
\&    use Apache2::Const \-compile => qw( :common );
\&    use Excel::Writer::XLSX;
\&    
\&    ##########################################
\&    # Main App Body
\&    ##########################################
\&    sub handler {
\&        my ( $r ) = @_;   # Apache request object is passed to handler in mod_perl 2
\&    
\&        # Set the filename and send the content type
\&        # This will appear when they save the spreadsheet
\&        my $filename = "mod_perl2_test.xlsx";
\&    
\&        ####################################################
\&        ## Send the content type headers the mod_perl 2 way
\&        ####################################################
\&        $r\->headers_out\->{\*(AqContent\-Disposition\*(Aq} = "attachment;filename=$filename";
\&        $r\->content_type( \*(Aqapplication/vnd.ms\-excel\*(Aq );
\&    
\&        ####################################################
\&        # Tie a filehandle to Apache\*(Aqs STDOUT.
\&        # Create a new workbook and add a worksheet.
\&        ####################################################
\&        tie *XLSX => $r;  # The mod_perl 2 way. Tie to the Apache::RequestRec object
\&        binmode( *XLSX );
\&    
\&        my $workbook  = Excel::Writer::XLSX\->new( \e*XLSX );
\&        my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&        # Set the column width for column 1
\&        $worksheet\->set_column( 0, 0, 20 );
\&    
\&    
\&        # Create a format
\&        my $format = $workbook\->add_format();
\&        $format\->set_bold();
\&        $format\->set_size( 15 );
\&        $format\->set_color( \*(Aqblue\*(Aq );
\&    
\&    
\&        # Write to the workbook
\&        $worksheet\->write( 0, 0, \*(AqHi Excel! from \*(Aq . $r\->hostname, $format );
\&    
\&        # You must close the workbook for Content\-disposition
\&        $workbook\->close();
\&        return Apache2::Const::OK;
\&    }
\&    
\&    1;
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/mod_perl2.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/mod_perl2.pl>
.SS "Example: sales.pl"
.IX Subsection "Example: sales.pl"
Example of a sales worksheet to demonstrate several different features.
Also uses functions from the Excel::Writer::XLSX::Utility module.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # Example of a sales worksheet to demonstrate several different features.
\&    # Also uses functions from the L<Excel::Writer::XLSX::Utility> module.
\&    #
\&    # reverse(\*(AqX\*(Aq), October 2001, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    use Excel::Writer::XLSX::Utility;
\&    
\&    # Create a new workbook and add a worksheet
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqsales.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet( \*(AqMay Sales\*(Aq );
\&    
\&    
\&    # Set up some formats
\&    my %heading = (
\&        bold     => 1,
\&        pattern  => 1,
\&        fg_color => 19,
\&        border   => 1,
\&        align    => \*(Aqcenter\*(Aq,
\&    );
\&    
\&    my %total = (
\&        bold       => 1,
\&        top        => 1,
\&        num_format => \*(Aq$#,##0.00\*(Aq
\&    );
\&    
\&    my $heading      = $workbook\->add_format( %heading );
\&    my $total_format = $workbook\->add_format( %total );
\&    my $price_format = $workbook\->add_format( num_format => \*(Aq$#,##0.00\*(Aq );
\&    my $date_format  = $workbook\->add_format( num_format => \*(Aqmmm d yyy\*(Aq );
\&    
\&    
\&    # Write the main headings
\&    $worksheet\->freeze_panes( 1 );    # Freeze the first row
\&    $worksheet\->write( \*(AqA1\*(Aq, \*(AqItem\*(Aq,     $heading );
\&    $worksheet\->write( \*(AqB1\*(Aq, \*(AqQuantity\*(Aq, $heading );
\&    $worksheet\->write( \*(AqC1\*(Aq, \*(AqPrice\*(Aq,    $heading );
\&    $worksheet\->write( \*(AqD1\*(Aq, \*(AqTotal\*(Aq,    $heading );
\&    $worksheet\->write( \*(AqE1\*(Aq, \*(AqDate\*(Aq,     $heading );
\&    
\&    # Set the column widths
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 25 );
\&    $worksheet\->set_column( \*(AqB:B\*(Aq, 10 );
\&    $worksheet\->set_column( \*(AqC:E\*(Aq, 16 );
\&    
\&    
\&    # Extract the sales data from the _\|_DATA_\|_ section at the end of the file.
\&    # In reality this information would probably come from a database
\&    my @sales;
\&    
\&    foreach my $line ( <DATA> ) {
\&        chomp $line;
\&        next if $line eq \*(Aq\*(Aq;
\&    
\&        # Simple\-minded processing of CSV data. Refer to the Text::CSV_XS
\&        # and Text::xSV modules for a more complete CSV handling.
\&        my @items = split /,/, $line;
\&        push @sales, \e@items;
\&    }
\&    
\&    
\&    # Write out the items from each row
\&    my $row = 1;
\&    foreach my $sale ( @sales ) {
\&    
\&        $worksheet\->write( $row, 0, @$sale[0] );
\&        $worksheet\->write( $row, 1, @$sale[1] );
\&        $worksheet\->write( $row, 2, @$sale[2], $price_format );
\&    
\&        # Create a formula like \*(Aq=B2*C2\*(Aq
\&        my $formula =
\&          \*(Aq=\*(Aq . xl_rowcol_to_cell( $row, 1 ) . "*" . xl_rowcol_to_cell( $row, 2 );
\&    
\&        $worksheet\->write( $row, 3, $formula, $price_format );
\&    
\&        # Parse the date
\&        my $date = xl_decode_date_US( @$sale[3] );
\&        $worksheet\->write( $row, 4, $date, $date_format );
\&        $row++;
\&    }
\&    
\&    # Create a formula to sum the totals, like \*(Aq=SUM(D2:D6)\*(Aq
\&    my $total = \*(Aq=SUM(D2:\*(Aq . xl_rowcol_to_cell( $row \- 1, 3 ) . ")";
\&    
\&    $worksheet\->write( $row, 3, $total, $total_format );
\&    
\&    
\&    _\|_DATA_\|_
\&    586 card,20,125.50,5/12/01
\&    Flat Screen Monitor,1,1300.00,5/12/01
\&    64 MB dimms,45,49.99,5/13/01
\&    15 GB HD,12,300.00,5/13/01
\&    Speakers (pair),5,15.50,5/14/01
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/sales.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/sales.pl>
.SS "Example: stats_ext.pl"
.IX Subsection "Example: stats_ext.pl"
Example of formatting using the Excel::Writer::XLSX module
.PP
This is a simple example of how to use functions that reference cells in
other worksheets within the same workbook.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # Example of formatting using the Excel::Writer::XLSX module
\&    #
\&    # This is a simple example of how to use functions that reference cells in
\&    # other worksheets within the same workbook.
\&    #
\&    # reverse(\*(AqX\*(Aq), March 2001, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new workbook and add a worksheet
\&    my $workbook   = Excel::Writer::XLSX\->new( \*(Aqstats_ext.xlsx\*(Aq );
\&    my $worksheet1 = $workbook\->add_worksheet( \*(AqTest results\*(Aq );
\&    my $worksheet2 = $workbook\->add_worksheet( \*(AqData\*(Aq );
\&    
\&    # Set the column width for columns 1
\&    $worksheet1\->set_column( \*(AqA:A\*(Aq, 20 );
\&    
\&    
\&    # Create a format for the headings
\&    my $heading = $workbook\->add_format();
\&    $heading\->set_bold();
\&    
\&    # Create a numerical format
\&    my $numformat = $workbook\->add_format();
\&    $numformat\->set_num_format( \*(Aq0.00\*(Aq );
\&    
\&    
\&    # Write some statistical functions
\&    $worksheet1\->write( \*(AqA1\*(Aq, \*(AqCount\*(Aq, $heading );
\&    $worksheet1\->write( \*(AqB1\*(Aq, \*(Aq=COUNT(Data!B2:B9)\*(Aq );
\&    
\&    $worksheet1\->write( \*(AqA2\*(Aq, \*(AqSum\*(Aq, $heading );
\&    $worksheet1\->write( \*(AqB2\*(Aq, \*(Aq=SUM(Data!B2:B9)\*(Aq );
\&    
\&    $worksheet1\->write( \*(AqA3\*(Aq, \*(AqAverage\*(Aq, $heading );
\&    $worksheet1\->write( \*(AqB3\*(Aq, \*(Aq=AVERAGE(Data!B2:B9)\*(Aq );
\&    
\&    $worksheet1\->write( \*(AqA4\*(Aq, \*(AqMin\*(Aq, $heading );
\&    $worksheet1\->write( \*(AqB4\*(Aq, \*(Aq=MIN(Data!B2:B9)\*(Aq );
\&    
\&    $worksheet1\->write( \*(AqA5\*(Aq, \*(AqMax\*(Aq, $heading );
\&    $worksheet1\->write( \*(AqB5\*(Aq, \*(Aq=MAX(Data!B2:B9)\*(Aq );
\&    
\&    $worksheet1\->write( \*(AqA6\*(Aq, \*(AqStandard Deviation\*(Aq, $heading );
\&    $worksheet1\->write( \*(AqB6\*(Aq, \*(Aq=STDEV(Data!B2:B9)\*(Aq );
\&    
\&    $worksheet1\->write( \*(AqA7\*(Aq, \*(AqKurtosis\*(Aq, $heading );
\&    $worksheet1\->write( \*(AqB7\*(Aq, \*(Aq=KURT(Data!B2:B9)\*(Aq );
\&    
\&    
\&    # Write the sample data
\&    $worksheet2\->write( \*(AqA1\*(Aq, \*(AqSample\*(Aq, $heading );
\&    $worksheet2\->write( \*(AqA2\*(Aq, 1 );
\&    $worksheet2\->write( \*(AqA3\*(Aq, 2 );
\&    $worksheet2\->write( \*(AqA4\*(Aq, 3 );
\&    $worksheet2\->write( \*(AqA5\*(Aq, 4 );
\&    $worksheet2\->write( \*(AqA6\*(Aq, 5 );
\&    $worksheet2\->write( \*(AqA7\*(Aq, 6 );
\&    $worksheet2\->write( \*(AqA8\*(Aq, 7 );
\&    $worksheet2\->write( \*(AqA9\*(Aq, 8 );
\&    
\&    $worksheet2\->write( \*(AqB1\*(Aq, \*(AqLength\*(Aq, $heading );
\&    $worksheet2\->write( \*(AqB2\*(Aq, 25.4,     $numformat );
\&    $worksheet2\->write( \*(AqB3\*(Aq, 25.4,     $numformat );
\&    $worksheet2\->write( \*(AqB4\*(Aq, 24.8,     $numformat );
\&    $worksheet2\->write( \*(AqB5\*(Aq, 25.0,     $numformat );
\&    $worksheet2\->write( \*(AqB6\*(Aq, 25.3,     $numformat );
\&    $worksheet2\->write( \*(AqB7\*(Aq, 24.9,     $numformat );
\&    $worksheet2\->write( \*(AqB8\*(Aq, 25.2,     $numformat );
\&    $worksheet2\->write( \*(AqB9\*(Aq, 24.8,     $numformat );
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/stats_ext.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/stats_ext.pl>
.SS "Example: stocks.pl"
.IX Subsection "Example: stocks.pl"
Example of formatting using the Excel::Writer::XLSX module
.PP
This example shows how to use a conditional numerical format
with colours to indicate if a share price has gone up or down.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # Example of formatting using the Excel::Writer::XLSX module
\&    #
\&    # This example shows how to use a conditional numerical format
\&    # with colours to indicate if a share price has gone up or down.
\&    #
\&    # reverse(\*(AqX\*(Aq), March 2001, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    # Create a new workbook and add a worksheet
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqstocks.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    # Set the column width for columns 1, 2, 3 and 4
\&    $worksheet\->set_column( 0, 3, 15 );
\&    
\&    
\&    # Create a format for the column headings
\&    my $header = $workbook\->add_format();
\&    $header\->set_bold();
\&    $header\->set_size( 12 );
\&    $header\->set_color( \*(Aqblue\*(Aq );
\&    
\&    
\&    # Create a format for the stock price
\&    my $f_price = $workbook\->add_format();
\&    $f_price\->set_align( \*(Aqleft\*(Aq );
\&    $f_price\->set_num_format( \*(Aq$0.00\*(Aq );
\&    
\&    
\&    # Create a format for the stock volume
\&    my $f_volume = $workbook\->add_format();
\&    $f_volume\->set_align( \*(Aqleft\*(Aq );
\&    $f_volume\->set_num_format( \*(Aq#,##0\*(Aq );
\&    
\&    
\&    # Create a format for the price change. This is an example of a conditional
\&    # format. The number is formatted as a percentage. If it is positive it is
\&    # formatted in green, if it is negative it is formatted in red and if it is
\&    # zero it is formatted as the default font colour (in this case black).
\&    # Note: the [Green] format produces an unappealing lime green. Try
\&    # [Color 10] instead for a dark green.
\&    #
\&    my $f_change = $workbook\->add_format();
\&    $f_change\->set_align( \*(Aqleft\*(Aq );
\&    $f_change\->set_num_format( \*(Aq[Green]0.0%;[Red]\-0.0%;0.0%\*(Aq );
\&    
\&    
\&    # Write out the data
\&    $worksheet\->write( 0, 0, \*(AqCompany\*(Aq, $header );
\&    $worksheet\->write( 0, 1, \*(AqPrice\*(Aq,   $header );
\&    $worksheet\->write( 0, 2, \*(AqVolume\*(Aq,  $header );
\&    $worksheet\->write( 0, 3, \*(AqChange\*(Aq,  $header );
\&    
\&    $worksheet\->write( 1, 0, \*(AqDamage Inc.\*(Aq );
\&    $worksheet\->write( 1, 1, 30.25, $f_price );       # $30.25
\&    $worksheet\->write( 1, 2, 1234567, $f_volume );    # 1,234,567
\&    $worksheet\->write( 1, 3, 0.085, $f_change );      # 8.5% in green
\&    
\&    $worksheet\->write( 2, 0, \*(AqDump Corp.\*(Aq );
\&    $worksheet\->write( 2, 1, 1.56, $f_price );        # $1.56
\&    $worksheet\->write( 2, 2, 7564, $f_volume );       # 7,564
\&    $worksheet\->write( 2, 3, \-0.015, $f_change );     # \-1.5% in red
\&    
\&    $worksheet\->write( 3, 0, \*(AqRev Ltd.\*(Aq );
\&    $worksheet\->write( 3, 1, 0.13, $f_price );        # $0.13
\&    $worksheet\->write( 3, 2, 321, $f_volume );        # 321
\&    $worksheet\->write( 3, 3, 0, $f_change );          # 0 in the font color (black)
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/stocks.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/stocks.pl>
.SS "Example: write_handler1.pl"
.IX Subsection "Example: write_handler1.pl"
Example of how to add a user defined data handler to the
Excel::Writer::XLSX \fIwrite()\fR method.
.PP
The following example shows how to add a handler for a 7 digit \s-1ID\s0 number.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # Example of how to add a user defined data handler to the
\&    # Excel::Writer::XLSX write() method.
\&    #
\&    # The following example shows how to add a handler for a 7 digit ID number.
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqwrite_handler1.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Add a handler for 7 digit id numbers. This is useful when you want a string
\&    # such as 0000001 written as a string instead of a number and thus preserve
\&    # the leading zeroes.
\&    #
\&    # Note: you can get the same effect using the keep_leading_zeros() method but
\&    # this serves as a simple example.
\&    #
\&    $worksheet\->add_write_handler( qr[^\ed{7}$], \e&write_my_id );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # The following function processes the data when a match is found.
\&    #
\&    sub write_my_id {
\&    
\&        my $worksheet = shift;
\&    
\&        return $worksheet\->write_string( @_ );
\&    }
\&    
\&    
\&    # This format maintains the cell as text even if it is edited.
\&    my $id_format = $workbook\->add_format( num_format => \*(Aq@\*(Aq );
\&    
\&    
\&    # Write some numbers in the user defined format
\&    $worksheet\->write( \*(AqA1\*(Aq, \*(Aq0000000\*(Aq, $id_format );
\&    $worksheet\->write( \*(AqA2\*(Aq, \*(Aq0000001\*(Aq, $id_format );
\&    $worksheet\->write( \*(AqA3\*(Aq, \*(Aq0004000\*(Aq, $id_format );
\&    $worksheet\->write( \*(AqA4\*(Aq, \*(Aq1234567\*(Aq, $id_format );
\&    
\&    # Write some numbers that don\*(Aqt match the defined format
\&    $worksheet\->write( \*(AqA6\*(Aq, \*(Aq000000\*(Aq, $id_format );
\&    $worksheet\->write( \*(AqA7\*(Aq, \*(Aq000001\*(Aq, $id_format );
\&    $worksheet\->write( \*(AqA8\*(Aq, \*(Aq004000\*(Aq, $id_format );
\&    $worksheet\->write( \*(AqA9\*(Aq, \*(Aq123456\*(Aq, $id_format );
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/write_handler1.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/write_handler1.pl>
.SS "Example: write_handler2.pl"
.IX Subsection "Example: write_handler2.pl"
Example of how to add a user defined data handler to the
Excel::Writer::XLSX \fIwrite()\fR method.
.PP
The following example shows how to add a handler for a 7 digit \s-1ID\s0 number.
It adds an additional constraint to the write_handler1.pl in that it only
filters data that isn't in the third column.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # Example of how to add a user defined data handler to the
\&    # Excel::Writer::XLSX write() method.
\&    #
\&    # The following example shows how to add a handler for a 7 digit ID number.
\&    # It adds an additional constraint to the write_handler1.pl in that it only
\&    # filters data that isn\*(Aqt in the third column.
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook  = Excel::Writer::XLSX\->new( \*(Aqwrite_handler2.xlsx\*(Aq );
\&    my $worksheet = $workbook\->add_worksheet();
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Add a handler for 7 digit id numbers. This is useful when you want a string
\&    # such as 0000001 written as a string instead of a number and thus preserve
\&    # the leading zeroes.
\&    #
\&    # Note: you can get the same effect using the keep_leading_zeros() method but
\&    # this serves as a simple example.
\&    #
\&    $worksheet\->add_write_handler( qr[^\ed{7}$], \e&write_my_id );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # The following function processes the data when a match is found. The handler
\&    # is set up so that it only filters data if it is in the third column.
\&    #
\&    sub write_my_id {
\&    
\&        my $worksheet = shift;
\&        my $col       = $_[1];
\&    
\&        # col is zero based
\&        if ( $col != 2 ) {
\&            return $worksheet\->write_string( @_ );
\&        }
\&        else {
\&    
\&            # Reject the match and return control to write()
\&            return undef;
\&        }
\&    
\&    }
\&    
\&    
\&    # This format maintains the cell as text even if it is edited.
\&    my $id_format = $workbook\->add_format( num_format => \*(Aq@\*(Aq );
\&    
\&    
\&    # Write some numbers in the user defined format
\&    $worksheet\->write( \*(AqA1\*(Aq, \*(Aq0000000\*(Aq, $id_format );
\&    $worksheet\->write( \*(AqB1\*(Aq, \*(Aq0000001\*(Aq, $id_format );
\&    $worksheet\->write( \*(AqC1\*(Aq, \*(Aq0000002\*(Aq, $id_format );
\&    $worksheet\->write( \*(AqD1\*(Aq, \*(Aq0000003\*(Aq, $id_format );
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/write_handler2.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/write_handler2.pl>
.SS "Example: write_handler3.pl"
.IX Subsection "Example: write_handler3.pl"
Example of how to add a user defined data handler to the
Excel::Writer::XLSX \fIwrite()\fR method.
.PP
The following example shows how to add a handler for dates in a specific
format.
.PP
See write_handler4.pl for a more rigorous example with error handling.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # Example of how to add a user defined data handler to the
\&    # Excel::Writer::XLSX write() method.
\&    #
\&    # The following example shows how to add a handler for dates in a specific
\&    # format.
\&    #
\&    # See write_handler4.pl for a more rigorous example with error handling.
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook    = Excel::Writer::XLSX\->new( \*(Aqwrite_handler3.xlsx\*(Aq );
\&    my $worksheet   = $workbook\->add_worksheet();
\&    my $date_format = $workbook\->add_format( num_format => \*(Aqdd/mm/yy\*(Aq );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Add a handler to match dates in the following format: d/m/yyyy
\&    #
\&    # The day and month can be single or double digits.
\&    #
\&    $worksheet\->add_write_handler( qr[^\ed{1,2}/\ed{1,2}/\ed{4}$], \e&write_my_date );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # The following function processes the data when a match is found.
\&    # See write_handler4.pl for a more rigorous example with error handling.
\&    #
\&    sub write_my_date {
\&    
\&        my $worksheet = shift;
\&        my @args      = @_;
\&    
\&        my $token = $args[2];
\&        $token =~ qr[^(\ed{1,2})/(\ed{1,2})/(\ed{4})$];
\&    
\&        # Change to the date format required by write_date_time().
\&        my $date = sprintf "%4d\-%02d\-%02dT", $3, $2, $1;
\&    
\&        $args[2] = $date;
\&    
\&        return $worksheet\->write_date_time( @args );
\&    }
\&    
\&    
\&    # Write some dates in the user defined format
\&    $worksheet\->write( \*(AqA1\*(Aq, \*(Aq22/12/2004\*(Aq, $date_format );
\&    $worksheet\->write( \*(AqA2\*(Aq, \*(Aq1/1/1995\*(Aq,   $date_format );
\&    $worksheet\->write( \*(AqA3\*(Aq, \*(Aq01/01/1995\*(Aq, $date_format );
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/write_handler3.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/write_handler3.pl>
.SS "Example: write_handler4.pl"
.IX Subsection "Example: write_handler4.pl"
Example of how to add a user defined data handler to the
Excel::Writer::XLSX \fIwrite()\fR method.
.PP
The following example shows how to add a handler for dates in a specific
format.
.PP
This is a more rigorous version of write_handler3.pl.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl \-w
\&    
\&    ###############################################################################
\&    #
\&    # Example of how to add a user defined data handler to the
\&    # Excel::Writer::XLSX write() method.
\&    #
\&    # The following example shows how to add a handler for dates in a specific
\&    # format.
\&    #
\&    # This is a more rigorous version of write_handler3.pl.
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook    = Excel::Writer::XLSX\->new( \*(Aqwrite_handler4.xlsx\*(Aq );
\&    my $worksheet   = $workbook\->add_worksheet();
\&    my $date_format = $workbook\->add_format( num_format => \*(Aqdd/mm/yy\*(Aq );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # Add a handler to match dates in the following formats: d/m/yy, d/m/yyyy
\&    #
\&    # The day and month can be single or double digits and the year can be  2 or 4
\&    # digits.
\&    #
\&    $worksheet\->add_write_handler( qr[^\ed{1,2}/\ed{1,2}/\ed{2,4}$], \e&write_my_date );
\&    
\&    
\&    ###############################################################################
\&    #
\&    # The following function processes the data when a match is found.
\&    #
\&    sub write_my_date {
\&    
\&        my $worksheet = shift;
\&        my @args      = @_;
\&    
\&        my $token = $args[2];
\&    
\&        if ( $token =~ qr[^(\ed{1,2})/(\ed{1,2})/(\ed{2,4})$] ) {
\&    
\&            my $day  = $1;
\&            my $mon  = $2;
\&            my $year = $3;
\&    
\&            # Use a window for 2 digit dates. This will keep some ragged Perl
\&            # programmer employed in thirty years time. :\-)
\&            if ( length $year == 2 ) {
\&                if ( $year < 50 ) {
\&                    $year += 2000;
\&                }
\&                else {
\&                    $year += 1900;
\&                }
\&            }
\&    
\&            my $date = sprintf "%4d\-%02d\-%02dT", $year, $mon, $day;
\&    
\&            # Convert the ISO ISO8601 style string to an Excel date
\&            $date = $worksheet\->convert_date_time( $date );
\&    
\&            if ( defined $date ) {
\&    
\&                # Date was valid
\&                $args[2] = $date;
\&                return $worksheet\->write_number( @args );
\&            }
\&            else {
\&    
\&                # Not a valid date therefore write as a string
\&                return $worksheet\->write_string( @args );
\&            }
\&        }
\&        else {
\&    
\&            # Shouldn\*(Aqt happen if the same match is used in the re and sub.
\&            return undef;
\&        }
\&    }
\&    
\&    
\&    # Write some dates in the user defined format
\&    $worksheet\->write( \*(AqA1\*(Aq, \*(Aq22/12/2004\*(Aq, $date_format );
\&    $worksheet\->write( \*(AqA2\*(Aq, \*(Aq22/12/04\*(Aq,   $date_format );
\&    $worksheet\->write( \*(AqA3\*(Aq, \*(Aq2/12/04\*(Aq,    $date_format );
\&    $worksheet\->write( \*(AqA4\*(Aq, \*(Aq2/5/04\*(Aq,     $date_format );
\&    $worksheet\->write( \*(AqA5\*(Aq, \*(Aq2/5/95\*(Aq,     $date_format );
\&    $worksheet\->write( \*(AqA6\*(Aq, \*(Aq2/5/1995\*(Aq,   $date_format );
\&    
\&    # Some erroneous dates
\&    $worksheet\->write( \*(AqA8\*(Aq, \*(Aq2/5/1895\*(Aq,  $date_format ); # Date out of Excel range
\&    $worksheet\->write( \*(AqA9\*(Aq, \*(Aq29/2/2003\*(Aq, $date_format ); # Invalid leap day
\&    $worksheet\->write( \*(AqA10\*(Aq, \*(Aq50/50/50\*(Aq, $date_format ); # Matches but isn\*(Aqt a date
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/write_handler4.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/write_handler4.pl>
.SS "Example: unicode_2022_jp.pl"
.IX Subsection "Example: unicode_2022_jp.pl"
A simple example of converting some Unicode text to an Excel file using
Excel::Writer::XLSX.
.PP
This example generates some Japanese from a file with \s-1ISO\-2022\-JP\s0
encoded text.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ##############################################################################
\&    #
\&    # A simple example of converting some Unicode text to an Excel file using
\&    # Excel::Writer::XLSX.
\&    #
\&    # This example generates some Japanese from a file with ISO\-2022\-JP
\&    # encoded text.
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqunicode_2022_jp.xlsx\*(Aq );
\&    
\&    die "Couldn\*(Aqt create new Excel file: $!.\en" unless defined $workbook;
\&    
\&    my $worksheet = $workbook\->add_worksheet();
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 50 );
\&    
\&    
\&    my $file = \*(Aqunicode_2022_jp.txt\*(Aq;
\&    
\&    open FH, \*(Aq<:encoding(iso\-2022\-jp)\*(Aq, $file or die "Couldn\*(Aqt open $file: $!\en";
\&    
\&    my $row = 0;
\&    
\&    while ( <FH> ) {
\&        next if /^#/;    # Ignore the comments in the sample file.
\&        chomp;
\&        $worksheet\->write( $row++, 0, $_ );
\&    }
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/unicode_2022_jp.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/unicode_2022_jp.pl>
.SS "Example: unicode_8859_11.pl"
.IX Subsection "Example: unicode_8859_11.pl"
A simple example of converting some Unicode text to an Excel file using
Excel::Writer::XLSX.
.PP
This example generates some Thai from a file with \s-1ISO\-8859\-11\s0 encoded text.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ##############################################################################
\&    #
\&    # A simple example of converting some Unicode text to an Excel file using
\&    # Excel::Writer::XLSX.
\&    #
\&    # This example generates some Thai from a file with ISO\-8859\-11 encoded text.
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqunicode_8859_11.xlsx\*(Aq );
\&    
\&    die "Couldn\*(Aqt create new Excel file: $!.\en" unless defined $workbook;
\&    
\&    my $worksheet = $workbook\->add_worksheet();
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 50 );
\&    
\&    
\&    my $file = \*(Aqunicode_8859_11.txt\*(Aq;
\&    
\&    open FH, \*(Aq<:encoding(iso\-8859\-11)\*(Aq, $file or die "Couldn\*(Aqt open $file: $!\en";
\&    
\&    my $row = 0;
\&    
\&    while ( <FH> ) {
\&        next if /^#/;    # Ignore the comments in the sample file.
\&        chomp;
\&        $worksheet\->write( $row++, 0, $_ );
\&    }
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/unicode_8859_11.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/unicode_8859_11.pl>
.SS "Example: unicode_8859_7.pl"
.IX Subsection "Example: unicode_8859_7.pl"
A simple example of converting some Unicode text to an Excel file using
Excel::Writer::XLSX.
.PP
This example generates some Greek from a file with \s-1ISO\-8859\-7\s0 encoded text.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ##############################################################################
\&    #
\&    # A simple example of converting some Unicode text to an Excel file using
\&    # Excel::Writer::XLSX.
\&    #
\&    # This example generates some Greek from a file with ISO\-8859\-7 encoded text.
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqunicode_8859_7.xlsx\*(Aq );
\&    
\&    die "Couldn\*(Aqt create new Excel file: $!.\en" unless defined $workbook;
\&    
\&    my $worksheet = $workbook\->add_worksheet();
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 50 );
\&    
\&    
\&    my $file = \*(Aqunicode_8859_7.txt\*(Aq;
\&    
\&    open FH, \*(Aq<:encoding(iso\-8859\-7)\*(Aq, $file or die "Couldn\*(Aqt open $file: $!\en";
\&    
\&    my $row = 0;
\&    
\&    while ( <FH> ) {
\&        next if /^#/;    # Ignore the comments in the sample file.
\&        chomp;
\&        $worksheet\->write( $row++, 0, $_ );
\&    }
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/unicode_8859_7.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/unicode_8859_7.pl>
.SS "Example: unicode_big5.pl"
.IX Subsection "Example: unicode_big5.pl"
A simple example of converting some Unicode text to an Excel file using
Excel::Writer::XLSX.
.PP
This example generates some Chinese from a file with \s-1BIG5\s0 encoded text.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ##############################################################################
\&    #
\&    # A simple example of converting some Unicode text to an Excel file using
\&    # Excel::Writer::XLSX.
\&    #
\&    # This example generates some Chinese from a file with BIG5 encoded text.
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqunicode_big5.xlsx\*(Aq );
\&    
\&    die "Couldn\*(Aqt create new Excel file: $!.\en" unless defined $workbook;
\&    
\&    my $worksheet = $workbook\->add_worksheet();
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 80 );
\&    
\&    
\&    my $file = \*(Aqunicode_big5.txt\*(Aq;
\&    
\&    open FH, \*(Aq<:encoding(big5)\*(Aq, $file or die "Couldn\*(Aqt open $file: $!\en";
\&    
\&    my $row = 0;
\&    
\&    while ( <FH> ) {
\&        next if /^#/;    # Ignore the comments in the sample file.
\&        chomp;
\&        $worksheet\->write( $row++, 0, $_ );
\&    }
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/unicode_big5.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/unicode_big5.pl>
.SS "Example: unicode_cp1251.pl"
.IX Subsection "Example: unicode_cp1251.pl"
A simple example of converting some Unicode text to an Excel file using
Excel::Writer::XLSX.
.PP
This example generates some Russian from a file with \s-1CP1251\s0 encoded text.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ##############################################################################
\&    #
\&    # A simple example of converting some Unicode text to an Excel file using
\&    # Excel::Writer::XLSX.
\&    #
\&    # This example generates some Russian from a file with CP1251 encoded text.
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqunicode_cp1251.xlsx\*(Aq );
\&    
\&    die "Couldn\*(Aqt create new Excel file: $!.\en" unless defined $workbook;
\&    
\&    my $worksheet = $workbook\->add_worksheet();
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 50 );
\&    
\&    
\&    my $file = \*(Aqunicode_cp1251.txt\*(Aq;
\&    
\&    open FH, \*(Aq<:encoding(cp1251)\*(Aq, $file or die "Couldn\*(Aqt open $file: $!\en";
\&    
\&    my $row = 0;
\&    
\&    while ( <FH> ) {
\&        next if /^#/;    # Ignore the comments in the sample file.
\&        chomp;
\&        $worksheet\->write( $row++, 0, $_ );
\&    }
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/unicode_cp1251.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/unicode_cp1251.pl>
.SS "Example: unicode_cp1256.pl"
.IX Subsection "Example: unicode_cp1256.pl"
A simple example of converting some Unicode text to an Excel file using
Excel::Writer::XLSX.
.PP
This example generates some Arabic text from a \s-1CP\-1256\s0 encoded file.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ##############################################################################
\&    #
\&    # A simple example of converting some Unicode text to an Excel file using
\&    # Excel::Writer::XLSX.
\&    #
\&    # This example generates some Arabic text from a CP\-1256 encoded file.
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqunicode_cp1256.xlsx\*(Aq );
\&    
\&    die "Couldn\*(Aqt create new Excel file: $!.\en" unless defined $workbook;
\&    
\&    my $worksheet = $workbook\->add_worksheet();
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 50 );
\&    
\&    
\&    my $file = \*(Aqunicode_cp1256.txt\*(Aq;
\&    
\&    open FH, \*(Aq<:encoding(cp1256)\*(Aq, $file or die "Couldn\*(Aqt open $file: $!\en";
\&    
\&    my $row = 0;
\&    
\&    while ( <FH> ) {
\&        next if /^#/;    # Ignore the comments in the sample file.
\&        chomp;
\&        $worksheet\->write( $row++, 0, $_ );
\&    }
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/unicode_cp1256.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/unicode_cp1256.pl>
.SS "Example: unicode_cyrillic.pl"
.IX Subsection "Example: unicode_cyrillic.pl"
A simple example of writing some Russian cyrillic text using
Excel::Writer::XLSX.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ##############################################################################
\&    #
\&    # A simple example of writing some Russian cyrillic text using
\&    # Excel::Writer::XLSX.
\&    #
\&    #
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), March 2005, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    # In this example we generate utf8 strings from character data but in a
\&    # real application we would expect them to come from an external source.
\&    #
\&    
\&    
\&    # Create a Russian worksheet name in utf8.
\&    my $sheet = pack "U*", 0x0421, 0x0442, 0x0440, 0x0430, 0x043D, 0x0438,
\&      0x0446, 0x0430;
\&    
\&    
\&    # Create a Russian string.
\&    my $str = pack "U*", 0x0417, 0x0434, 0x0440, 0x0430, 0x0432, 0x0441,
\&      0x0442, 0x0432, 0x0443, 0x0439, 0x0020, 0x041C,
\&      0x0438, 0x0440, 0x0021;
\&    
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqunicode_cyrillic.xlsx\*(Aq );
\&    
\&    die "Couldn\*(Aqt create new Excel file: $!.\en" unless defined $workbook;
\&    
\&    my $worksheet = $workbook\->add_worksheet( $sheet . \*(Aq1\*(Aq );
\&    
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 18 );
\&    $worksheet\->write( \*(AqA1\*(Aq, $str );
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/unicode_cyrillic.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/unicode_cyrillic.pl>
.SS "Example: unicode_koi8r.pl"
.IX Subsection "Example: unicode_koi8r.pl"
A simple example of converting some Unicode text to an Excel file using
Excel::Writer::XLSX.
.PP
This example generates some Russian from a file with \s-1KOI8\-R\s0 encoded text.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ##############################################################################
\&    #
\&    # A simple example of converting some Unicode text to an Excel file using
\&    # Excel::Writer::XLSX.
\&    #
\&    # This example generates some Russian from a file with KOI8\-R encoded text.
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqunicode_koi8r.xlsx\*(Aq );
\&    
\&    die "Couldn\*(Aqt create new Excel file: $!.\en" unless defined $workbook;
\&    
\&    my $worksheet = $workbook\->add_worksheet();
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 50 );
\&    
\&    
\&    my $file = \*(Aqunicode_koi8r.txt\*(Aq;
\&    
\&    open FH, \*(Aq<:encoding(koi8\-r)\*(Aq, $file or die "Couldn\*(Aqt open $file: $!\en";
\&    
\&    my $row = 0;
\&    
\&    while ( <FH> ) {
\&        next if /^#/;    # Ignore the comments in the sample file.
\&        chomp;
\&        $worksheet\->write( $row++, 0, $_ );
\&    }
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/unicode_koi8r.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/unicode_koi8r.pl>
.SS "Example: unicode_polish_utf8.pl"
.IX Subsection "Example: unicode_polish_utf8.pl"
A simple example of converting some Unicode text to an Excel file using
Excel::Writer::XLSX.
.PP
This example generates some Polish from a file with \s-1UTF8\s0 encoded text.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ##############################################################################
\&    #
\&    # A simple example of converting some Unicode text to an Excel file using
\&    # Excel::Writer::XLSX.
\&    #
\&    # This example generates some Polish from a file with UTF8 encoded text.
\&    #
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqunicode_polish_utf8.xlsx\*(Aq );
\&    
\&    die "Couldn\*(Aqt create new Excel file: $!.\en" unless defined $workbook;
\&    
\&    my $worksheet = $workbook\->add_worksheet();
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 50 );
\&    
\&    
\&    my $file = \*(Aqunicode_polish_utf8.txt\*(Aq;
\&    
\&    open FH, \*(Aq<:encoding(utf8)\*(Aq, $file or die "Couldn\*(Aqt open $file: $!\en";
\&    
\&    my $row = 0;
\&    
\&    while ( <FH> ) {
\&        next if /^#/;    # Ignore the comments in the sample file.
\&        chomp;
\&        $worksheet\->write( $row++, 0, $_ );
\&    }
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/unicode_polish_utf8.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/unicode_polish_utf8.pl>
.SS "Example: unicode_shift_jis.pl"
.IX Subsection "Example: unicode_shift_jis.pl"
A simple example of converting some Unicode text to an Excel file using
Excel::Writer::XLSX.
.PP
This example generates some Japenese text from a file with Shift-JIS
encoded text.
.PP
Source code for this example:
.PP
.Vb 1
\&    #!/usr/bin/perl
\&    
\&    ##############################################################################
\&    #
\&    # A simple example of converting some Unicode text to an Excel file using
\&    # Excel::Writer::XLSX.
\&    #
\&    # This example generates some Japenese text from a file with Shift\-JIS
\&    # encoded text.
\&    #
\&    # reverse(\*(AqX\*(Aq), September 2004, John McNamara, jmcnamara@cpan.org
\&    #
\&    
\&    use strict;
\&    use warnings;
\&    use Excel::Writer::XLSX;
\&    
\&    
\&    my $workbook = Excel::Writer::XLSX\->new( \*(Aqunicode_shift_jis.xlsx\*(Aq );
\&    
\&    die "Couldn\*(Aqt create new Excel file: $!.\en" unless defined $workbook;
\&    
\&    my $worksheet = $workbook\->add_worksheet();
\&    $worksheet\->set_column( \*(AqA:A\*(Aq, 50 );
\&    
\&    
\&    my $file = \*(Aqunicode_shift_jis.txt\*(Aq;
\&    
\&    open FH, \*(Aq<:encoding(shiftjis)\*(Aq, $file or die "Couldn\*(Aqt open $file: $!\en";
\&    
\&    my $row = 0;
\&    
\&    while ( <FH> ) {
\&        next if /^#/;    # Ignore the comments in the sample file.
\&        chomp;
\&        $worksheet\->write( $row++, 0, $_ );
\&    }
\&    
\&    
\&    _\|_END_\|_
.Ve
.PP
Download this example: http://cpansearch.perl.org/src/JMCNAMARA/Excel\-Writer\-XLSX\-0.05/examples/unicode_shift_jis.pl <http://cpansearch.perl.org/src/JMCNAMARA/Excel-Writer-XLSX-0.05/examples/unicode_shift_jis.pl>
.SH "AUTHOR"
.IX Header "AUTHOR"
John McNamara jmcnamara@cpan.org
.PP
Contributed examples contain the original author's name.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright MM-MMXI, John McNamara.
.PP
All Rights Reserved. This module is free software. It may be used, redistributed and/or modified under the same terms as Perl itself.
